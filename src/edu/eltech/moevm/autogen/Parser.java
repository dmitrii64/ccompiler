//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 15 "grammar.y"
  package edu.eltech.moevm.autogen;
  import java.io.*;
//#line 20 "Parser.java"

public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IDENTIFIER=257;
public final static short CONSTANT=258;
public final static short STRING_LITERAL=259;
public final static short SIZEOF=260;
public final static short PTR_OP=261;
public final static short INC_OP=262;
public final static short DEC_OP=263;
public final static short LEFT_OP=264;
public final static short RIGHT_OP=265;
public final static short LE_OP=266;
public final static short GE_OP=267;
public final static short EQ_OP=268;
public final static short NE_OP=269;
public final static short AND_OP=270;
public final static short OR_OP=271;
public final static short MUL_ASSIGN=272;
public final static short DIV_ASSIGN=273;
public final static short MOD_ASSIGN=274;
public final static short ADD_ASSIGN=275;
public final static short SUB_ASSIGN=276;
public final static short LEFT_ASSIGN=277;
public final static short RIGHT_ASSIGN=278;
public final static short AND_ASSIGN=279;
public final static short XOR_ASSIGN=280;
public final static short OR_ASSIGN=281;
public final static short TYPE_NAME=282;
public final static short TYPEDEF=283;
public final static short EXTERN=284;
public final static short STATIC=285;
public final static short AUTO=286;
public final static short REGISTER=287;
public final static short CHAR=288;
public final static short SHORT=289;
public final static short INT=290;
public final static short LONG=291;
public final static short SIGNED=292;
public final static short UNSIGNED=293;
public final static short FLOAT=294;
public final static short DOUBLE=295;
public final static short CONST=296;
public final static short VOLATILE=297;
public final static short VOID=298;
public final static short STRUCT=299;
public final static short UNION=300;
public final static short ENUM=301;
public final static short ELLIPSIS=302;
public final static short CASE=303;
public final static short DEFAULT=304;
public final static short IF=305;
public final static short ELSE=306;
public final static short SWITCH=307;
public final static short WHILE=308;
public final static short DO=309;
public final static short FOR=310;
public final static short GOTO=311;
public final static short CONTINUE=312;
public final static short BREAK=313;
public final static short RETURN=314;
public final static short SEMICOLON=315;
public final static short BRACELEFT=316;
public final static short BRACERIGHT=317;
public final static short COMMA=318;
public final static short COLON=319;
public final static short EQUAL=320;
public final static short RBLEFT=321;
public final static short RBRIGHT=322;
public final static short BRACKETLEFT=323;
public final static short BRACKETRIGHT=324;
public final static short DOT=325;
public final static short AMP=326;
public final static short EXCL=327;
public final static short TILDE=328;
public final static short MINUS=329;
public final static short PLUS=330;
public final static short STAR=331;
public final static short SLASH=332;
public final static short PERCENT=333;
public final static short LESS=334;
public final static short GREATER=335;
public final static short CARET=336;
public final static short BAR=337;
public final static short QUESTION=338;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    4,    4,    6,    6,    6,    6,    6,    6,
    7,    7,    7,    7,    7,    7,    8,    8,   10,   10,
   10,   10,   11,   11,   11,   12,   12,   12,   13,   13,
   13,   13,   13,   14,   14,   14,   15,   15,   16,   16,
   17,   17,   18,   18,   19,   19,   20,   20,    5,    5,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,    2,    2,   22,   23,   23,   24,   24,   24,   24,
   24,   24,   25,   25,   29,   29,   26,   26,   26,   26,
   26,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   32,   32,   32,   34,   34,   35,   35,
   36,   37,   37,   37,   37,   38,   38,   39,   39,   39,
   33,   33,   33,   40,   40,   41,   41,   28,   28,   30,
   30,   43,   43,   43,   43,   43,   43,   43,   42,   42,
   42,   42,   46,   46,   44,   44,   47,   47,   48,   48,
   48,   45,   45,    9,    9,   49,   49,   49,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   31,   31,   31,
   51,   51,   52,   52,   52,   52,   52,   52,   53,   53,
   53,   54,   54,   54,   54,   60,   60,   59,   59,   55,
   55,   56,   56,   57,   57,   57,   57,   58,   58,   58,
   58,   58,    0,    0,   61,   61,   62,   62,   62,   62,
};
final static short yylen[] = {                            2,
    1,    1,    1,    3,    1,    4,    3,    4,    3,    3,
    2,    2,    1,    3,    1,    2,    2,    2,    2,    4,
    1,    1,    1,    1,    1,    1,    1,    4,    1,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    5,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    1,    2,    3,    1,    2,    1,    2,
    1,    2,    1,    3,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    4,    2,    1,    1,    1,    2,
    3,    2,    1,    2,    1,    1,    3,    1,    2,    3,
    4,    5,    2,    1,    3,    1,    3,    1,    1,    2,
    1,    1,    3,    4,    3,    4,    4,    3,    1,    2,
    2,    3,    1,    2,    1,    3,    1,    3,    2,    2,
    1,    1,    3,    1,    2,    1,    1,    2,    3,    2,
    3,    3,    4,    2,    3,    3,    4,    1,    3,    4,
    1,    3,    1,    1,    1,    1,    1,    1,    3,    4,
    3,    2,    3,    3,    4,    1,    2,    1,    2,    1,
    2,    7,    5,    5,    7,    6,    7,    3,    2,    2,
    2,    3,    1,    2,    1,    1,    4,    3,    3,    2,
};
final static short yydefred[] = {                         0,
  132,  103,   87,   88,   89,   90,   91,   93,   94,   95,
   96,   99,  100,   97,   98,  128,  129,   92,  107,  108,
    0,    0,    0,    0,  206,    0,    0,    0,    0,    0,
  101,  102,    0,    0,    0,  203,  205,    0,    0,    0,
  143,  141,    0,  204,   75,    0,   83,    0,   78,   80,
   82,    0,  186,    0,  210,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  124,  133,  144,  142,    0,   76,
    0,  208,    0,    0,    2,    3,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   21,   22,   23,   24,   25,   26,  190,  182,    5,
    0,    0,   72,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,  188,  173,  174,
  175,  176,  177,  178,    0,    0,    0,  187,  209,    0,
    0,    0,    0,  109,    0,  152,  138,    0,    0,    0,
    0,  147,    1,  135,   27,   74,    0,    0,    0,    0,
  121,   84,    0,  168,   86,  207,    0,    0,   19,    0,
   16,   17,    0,    0,    0,    0,    0,    0,    0,    0,
  199,  200,  201,    0,    0,    0,    0,    0,  191,    0,
   11,   12,    0,    0,    0,   62,   63,   64,   65,   66,
   67,   68,   69,   70,   71,   61,    0,   18,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  183,  189,  184,
    0,    0,  112,  114,  105,  110,    0,    0,    0,  116,
    0,    0,  149,    0,  150,    0,  136,  137,    0,    0,
  134,  122,  127,  125,  171,    0,  179,    0,    0,  181,
    0,    0,    0,    0,    0,  198,  202,    4,    0,    0,
    0,  155,   73,   10,    7,    0,   13,    0,    9,   60,
   30,   31,   32,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  185,
  104,  119,    0,    0,  111,  164,    0,    0,  160,    0,
    0,    0,    0,  153,  146,  148,    0,  169,   20,  180,
    0,    0,    0,    0,    0,   28,    8,    0,    6,    0,
  120,  117,  165,  159,  161,  166,    0,  162,    0,  170,
  172,    0,  193,  194,    0,    0,    0,   14,   58,  167,
  163,    0,    0,  196,    0,  192,  195,  197,
};
final static short yydgoto[] = {                         24,
  100,  101,  102,  266,  103,  104,  105,  106,  176,  107,
  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
  197,  147,   53,   54,   46,   27,   28,   29,   47,   30,
  155,   31,   32,   33,  133,  134,  135,  229,  230,   64,
   65,   34,   35,  297,  140,   43,  141,  142,  298,  236,
  246,  118,  119,  120,  121,  122,  123,  124,  125,   56,
   36,   37,
};
final static short yysindex[] = {                       444,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -104,   12,  -42,  444,    0,   33, 1859, 1859, 1859, 1782,
    0,    0, -103,  -27,   37,    0,    0,  -91, -220,   16,
    0,    0,  -42,    0,    0,   51,    0,  889,    0,    0,
    0,   22,    0,   33,    0, 1782,  -60,  354,   37,  489,
 1163, -220,   19,   -6,    0,    0,    0,    0,   12,    0,
 1623,    0, 1782,   74,    0,    0, 1710, 1718, 1718, 1726,
   79,   69,  103,  115,  169,  127,  -86,  120,  133, 1631,
  256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  118,  -38,    0,  168, 1726,    0,  223,   45,  -65,   82,
  -25,  160,  110,  102,  -53,  -29,    0,    0,    0,    0,
    0,    0,    0,    0,   93,   80,  175,    0,    0,  354,
  354,  354, 1746,    0,   36,    0,    0,    2,  211,  313,
  214,    0,    0,    0,    0,    0,  173,   15, 1726, -220,
    0,    0, 1623,    0,    0,    0,  169,  256,    0, 1726,
    0,    0,  220,  169, 1726, 1726, 1726,  -21, 1649,  232,
    0,    0,    0,  119,  371,  261,  117, 1726,    0,   40,
    0,    0, 1347, 1726,   71,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1726,    0, 1726, 1726,
 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726,
 1726, 1726, 1726, 1726, 1726, 1726, 1726,    0,    0,    0,
  151, 1810,    0,    0,    0,    0, 1726,  289,  128,    0,
  304, 1528,    0,  -17,    0,   77,    0,    0,  166, 1830,
    0,    0,    0,    0,    0,   25,    0,  345,  169,    0,
  378,  380,  389,  385, 1649,    0,    0,    0, 1726,  396,
   94,    0,    0,    0,    0,  409,    0,    6,    0,    0,
    0,    0,    0,  223,  223,   45,   45,  -65,  -65,  -65,
  -65,   82,   82,  -25,  160,  110,  102,  -53,   38,    0,
    0,    0, 1726,   36,    0,    0,  398,  416,    0,  377,
   77,  539, 1680,    0,    0,    0,  585,    0,    0,    0,
  169,  169,  169, 1726, 1688,    0,    0, 1726,    0, 1726,
    0,    0,    0,    0,    0,    0,  428,    0,  382,    0,
    0,  179,    0,    0,  427,  169,  476,    0,    0,    0,
    0,  169,  429,    0,  169,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   67,    0,    0,    0,  -35,    7,  663,    0,
    0,    0,    0,    0,  518,    0,    0,  209,    0,    0,
    0,    0,  142,    0,    0,    0,    0,  129,    0,    0,
    0,    0,    0,    0,    0,    0,  376,    0,  576,    0,
    0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  881,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  948,    0, 1040,    0,    0, 1002, 1237, 1311,  843,
 1590,  -23, 1752, 1077, 1900,   56,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  129,    0,    0,    0,
  708,  858,    0,    0,    0,    0,    0,  480,    0,    0,
  448,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  449,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  131,    0,    0,
    0,    0,    0,  481,    0,  482,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  470,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1192, 1200, 1274, 1282, 1319, 1356, 1434,
 1471, 1389, 1553, 1592, 1740, 1791, 1869, 1938,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  487,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0, 1737,    0,    0,  -32,  817,    0,  -95,  369,   54,
   68,  152,  241,  300,  316,  318,  319,  317,    0,  -58,
    0,  -66,  215,    1,    0,    0,  -46, 1875,  466,  -11,
 -137,    0,    0,    0,  406, -106,   -2,    0,  243,  477,
  390,    3,   -3,  -56,    0,    0,    0,  301, -105, -193,
    0,  634,    0,  165, -152,    0,    0,    0,  417,  149,
  534,    0,
};
final static int YYTABLESIZE=2209;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         23,
   26,  183,  146,  139,   77,   77,   77,  185,   77,  198,
   40,  131,   22,  163,   48,  245,  255,   49,   39,   58,
   49,  146,  231,   77,   26,   42,  226,   49,   50,   51,
   59,   62,  235,  217,   49,   49,   63,  150,  154,   49,
  301,  231,  127,   23,  131,   68,   79,   79,   79,  178,
   79,   22,  184,   23,   97,   77,   66,  127,  150,   92,
  138,   91,  130,   93,   94,   79,   95,  301,  307,   49,
   49,  262,   22,  232,   23,   22,   60,   23,  126,  149,
   98,  178,  243,  131,  131,  131,  131,  202,  177,  203,
  146,   45,  232,  227,   69,  320,   57,   79,  319,   57,
   49,   49,  315,  271,  272,  273,  139,  139,  165,   70,
  139,  131,   97,   57,   57,  226,  302,   92,  151,   91,
  154,   93,   94,  228,   95,   97,  233,   61,  223,  224,
   92,  157,   91,  260,   93,   94,  164,   95,   98,  242,
  234,  208,  166,  209,   52,  263,   99,   96,   57,  308,
  267,   98,   38,   57,  167,  177,  260,  139,   23,  126,
  292,  178,  178,  316,  270,  300,  169,  303,  146,  331,
  170,  294,   85,  146,  118,  131,  179,  257,  171,  261,
   57,  140,  140,   97,  232,  140,  295,   85,   92,  118,
   91,  172,   93,   94,   55,   95,   73,  212,  204,  205,
  126,   97,   52,  213,  220,   96,   92,  232,   91,   98,
   93,   94,   72,   95,   25,   52,  215,  218,   96,   40,
  129,   77,  180,  181,  182,  214,  321,   98,  196,    1,
   59,  138,  140,  234,  146,   71,  329,  156,   25,    1,
  138,  216,  210,  211,  146,  327,   49,   49,  123,  123,
  123,  237,  123,   16,   17,  274,  275,  240,    1,  201,
  138,  339,  261,   79,  199,  241,  123,  123,    1,  200,
  128,  276,  277,   52,  154,  290,   96,  249,   74,   75,
   76,   77,  228,   78,   79,  338,  254,  128,   97,    1,
  256,   52,    1,   92,   96,   91,  264,   93,   94,  123,
   95,  259,  138,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,   21,  139,   80,   81,   82,  269,   83,   84,
   85,   86,   87,   88,   89,   90,   74,   75,   76,   77,
  128,   78,   79,  231,  296,   23,  293,  206,  207,   74,
   75,   76,   77,  238,   78,   79,  239,  278,  279,  280,
  281,    2,    3,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,   96,   80,   81,   82,  309,   83,   84,   85,   86,
   87,   88,   89,   90,  232,   80,   81,   82,  140,   83,
   84,   85,   86,   87,   88,   89,   90,   74,   75,   76,
   77,  258,   78,   79,  178,  106,  106,  106,  311,  106,
  312,  178,  304,  178,  314,   74,   75,   76,   77,  313,
   78,   79,  178,  106,  106,  260,  296,   23,  323,  186,
  187,  188,  189,  190,  191,  192,  193,  194,  195,  317,
  282,  283,  318,   80,   81,   82,  324,   83,   84,   85,
   86,   87,   88,   89,   90,  123,  106,  343,  340,  325,
  178,   80,   81,   82,  341,   83,   84,   85,   86,   87,
   88,   89,   90,   22,  342,   23,  232,  347,  145,  154,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  156,  284,  143,   75,   76,   77,  345,   78,   79,  178,
  151,  156,  157,  151,  156,  157,  248,  158,  285,  137,
  158,  286,  288,  287,  152,  222,  322,    2,  148,  244,
  306,    0,  221,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,   44,  131,    0,
    1,  131,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  131,  131,    0,  131,  326,
    0,    0,    0,    0,    0,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,   21,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  130,   97,    0,  130,
    0,    0,   92,    0,   91,    0,   93,   94,    0,   95,
    0,    0,  106,  130,  130,    2,  130,    0,    0,    0,
  131,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,   21,    0,    0,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,    0,  130,    0,
    1,    0,   81,   81,   81,    0,   81,  153,    0,  330,
   96,    0,    0,    0,    0,    0,    0,    0,  168,    0,
    0,   81,    0,    0,    0,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,   21,  136,    0,  113,  113,  113,
    0,    0,    0,   81,    0,    0,    0,    0,  219,    0,
    0,    0,    0,    0,    0,  113,    0,    0,    0,    0,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
  247,    0,    0,    0,    0,    0,    0,  250,  113,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,    0,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
    0,  143,   75,   76,   77,    0,   78,   79,    0,    0,
    0,    0,    0,    0,  219,    0,    0,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  145,    0,    0,
   44,    0,  310,   44,    0,    0,   44,    0,    0,    0,
    0,    0,    0,  159,  161,  162,  145,  115,  115,  115,
   44,   44,    0,    0,    0,   44,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  115,    0,    1,    1,   81,
    1,  145,    1,    1,    1,    1,    1,    1,    0,    0,
    0,    0,    0,    0,    0,   44,   44,    0,    0,    1,
    1,    1,    1,    1,  332,  333,  334,    0,  115,   71,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  113,  145,   44,   44,    0,  344,
    0,    1,    0,    0,    1,  346,    0,    0,  348,    0,
    0,    0,    0,    0,   15,   15,    0,    0,   15,   15,
   15,   15,   15,    0,   15,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    1,   15,   15,   15,   15,   15,
   15,   52,    0,    0,    0,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,    0,    0,    0,    0,    0,    0,   33,
   15,   15,   33,  145,   33,   33,   33,    0,  145,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   33,
   33,   33,    0,   33,   33,    0,    0,    0,    0,    0,
    0,   15,   15,    0,    0,  145,   27,   27,    0,    0,
   27,   27,   27,   27,   27,    0,   27,    0,    0,    0,
    0,    0,    0,    0,   33,   33,    0,   27,   27,   27,
    0,   27,   27,    0,    0,    0,    0,    0,    0,  145,
   44,   44,   44,   44,  115,    0,    0,   53,    0,  145,
   53,    0,    0,    0,    0,   33,   33,    0,    0,    0,
    0,    0,   27,   27,   53,   53,  145,    0,    0,   53,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,   27,   27,    0,    0,    0,    0,   53,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
    0,    0,    0,    0,    0,   97,    0,    0,    0,    0,
   92,   53,   91,    0,   93,   94,    0,   95,    0,    0,
    0,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   34,
    0,    0,   34,    0,   34,   34,   34,   35,    0,    0,
   35,    0,   35,   35,   35,    0,    0,    0,    0,   34,
   34,   34,    0,   34,   34,  144,    0,   35,   35,   35,
    0,   35,   35,    0,    0,   33,   33,   33,   33,   33,
   33,   33,   33,    0,   36,    0,    0,   36,    0,    0,
   36,    0,    0,    0,   34,   34,    0,    0,   96,    0,
    0,    0,   35,   35,   36,   36,   36,    0,   36,   36,
    0,    0,    0,   27,   27,   27,   27,   27,   27,   27,
   27,   37,    0,    0,   37,   34,   34,   37,    0,   38,
    0,    0,   38,   35,   35,   38,    0,    0,    0,   36,
   36,   37,   37,   37,    0,   37,   37,    0,    0,   38,
   38,   38,    0,   38,   38,    0,   53,   53,   39,    0,
    0,   39,    0,    0,   39,    0,   42,    0,    0,   42,
   36,   36,   42,    0,    0,    0,   37,   37,   39,   39,
   39,    0,   39,   39,   38,   38,   42,   42,   42,   97,
   42,   42,    0,    0,   92,    0,   91,  265,   93,   94,
    0,   95,    0,   43,    0,    0,   43,   37,   37,   43,
    0,    0,    0,   39,   39,   38,   38,    0,    0,    0,
    0,   42,   42,   43,   43,   43,    0,   43,   43,  143,
   75,   76,   77,    0,   78,   79,   45,    0,    0,   45,
    0,    0,   45,    0,   39,   39,    0,    0,    0,    0,
    0,    0,   42,   42,    0,    0,   45,   45,   43,   43,
    0,   45,    0,    0,    0,   34,   34,   34,   34,   34,
   34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
   35,   40,   96,    0,   40,    0,    0,   40,    0,   43,
   43,   45,   45,    0,    0,    0,    0,    0,    0,    0,
    0,   40,   40,   40,    0,   40,   40,    0,    0,    0,
   36,   36,   36,   36,   36,   36,   36,   36,   41,    0,
    0,   41,   45,   45,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,   40,   41,   41,
   41,    0,   41,   41,    0,    0,    0,   37,   37,   37,
   37,   37,   37,   37,   37,   38,   38,   38,   38,   38,
   38,   38,   38,    0,    0,    0,    0,   40,   40,    0,
   97,    0,    0,   41,   41,   92,    0,   91,    0,   93,
   94,    0,   95,    0,    0,    0,   39,   39,   39,   39,
   39,   39,    0,    0,   42,   42,   42,   42,   42,   42,
   46,    0,    0,   46,   41,   41,   46,    0,    0,    0,
    0,    0,    0,  143,   75,   76,   77,    0,   78,   79,
   46,   46,    0,    0,    0,   46,    0,    0,    0,    0,
  299,   43,   43,   43,   43,   43,   43,   47,    0,   48,
   47,    0,   48,   47,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   46,   46,   47,   47,   48,
   48,    0,   47,   96,   48,   97,   45,   45,   45,   45,
   92,    0,   91,   97,   93,   94,    0,   95,   92,    0,
   91,    0,   93,   94,    0,   95,   46,   46,    0,    0,
    0,   97,   47,   47,   48,   48,   92,    0,   91,  173,
   93,   94,    0,   95,    0,    0,    0,    0,    0,   40,
   40,   40,   40,   40,   40,    0,    0,   98,    0,    0,
    0,    0,   97,   47,   47,   48,   48,   92,    0,   91,
   97,   93,   94,    0,   95,   92,    0,   91,  336,   93,
   94,    0,   95,    0,    0,    0,   41,   41,   41,   41,
   41,   41,   97,    0,    0,  153,    0,   92,   96,  158,
   97,   93,   94,    0,   95,   92,   96,  160,   97,   93,
   94,    0,   95,   92,    0,   91,    0,   93,   94,    0,
   95,    0,  328,    0,   96,    0,    0,    0,    0,    0,
   50,    0,    0,   50,  143,   75,   76,   77,    0,   78,
   79,    0,   51,    0,    0,   51,    0,   50,   50,    0,
    0,    0,   50,    0,    0,   96,    0,    0,    0,   51,
   51,    0,    0,   96,   51,    0,    0,    0,    0,    0,
   46,   46,   46,   46,    0,    0,  174,  175,    0,    0,
    0,   52,   50,   50,   52,   96,    0,    0,    0,    0,
    0,    0,    0,   96,   51,    0,    0,    0,   52,   52,
    0,   96,    0,   52,    0,    0,    0,    0,    0,   47,
   47,   48,   48,   50,   50,    0,    0,    0,    0,    0,
  225,    0,    0,    0,    0,   51,   51,    0,    0,  143,
   75,   76,   77,   52,   78,   79,    0,  143,   75,   76,
   77,    0,   78,   79,  175,    0,  175,   41,    0,    0,
    0,  251,  252,  253,   52,  143,   75,   76,   77,   54,
   78,   79,   54,    0,   52,   52,    0,   67,    0,    0,
  268,    0,    0,    0,    0,    0,   54,   54,    0,    0,
    0,   54,  132,    0,  291,    0,  143,   75,   76,   77,
   55,   78,   79,   55,  143,   75,   76,   77,    0,   78,
   79,    0,    0,  289,    0,    0,    0,   55,   55,    0,
    0,   54,   55,    0,    0,  132,  143,   75,   76,   77,
    0,   78,   79,    0,  143,   75,   76,   77,   56,   78,
   79,   56,  143,   75,   76,   77,    0,   78,   79,    0,
    0,    0,   55,   54,    0,   56,   56,    0,    0,    0,
   56,    0,    0,    0,  132,  132,  132,  132,    0,   50,
   50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   51,   51,    0,   55,    0,    0,    2,    0,    0,
   56,    0,  132,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,    0,    0,    0,
  335,  337,    0,    0,    0,    0,    0,    0,    0,    0,
   52,   52,   56,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,   21,    0,    0,    0,    0,    0,    0,    0,
    0,    2,    0,    0,    0,    0,  132,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,    2,    3,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,  305,    0,    0,    0,    0,    0,    0,   54,   54,
    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   56,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         42,
    0,   40,   61,   60,   40,   41,   42,   46,   44,  105,
   22,   58,   40,   80,   26,  153,  169,   41,  123,  123,
   44,   80,   40,   59,   24,   23,  133,   27,   28,   29,
   34,  123,  138,   63,   58,   59,  257,   44,   71,   63,
  234,   40,   54,   42,   91,   43,   40,   41,   42,   44,
   44,   40,   91,   42,   33,   91,   41,   69,   44,   38,
   60,   40,  123,   42,   43,   59,   45,  261,   44,   93,
   94,  177,   40,   91,   42,   40,   40,   42,   44,   61,
   59,   44,  149,  130,  131,  132,  133,   43,   91,   45,
  149,   59,   91,   58,   44,   58,   41,   91,   93,   44,
  124,  125,  255,  199,  200,  201,   40,   41,   40,   59,
   44,  158,   33,   58,   59,  222,   40,   38,  125,   40,
  153,   42,   43,  135,   45,   33,  138,   91,  131,  132,
   38,   58,   40,   40,   42,   43,   58,   45,   59,  125,
  138,   60,   40,   62,  123,  178,  125,  126,   93,  125,
  183,   59,  257,  257,   40,  158,   40,   91,   42,  125,
  227,   44,   44,  259,  197,  232,   40,   91,  227,  307,
  257,   44,   44,  232,   44,  222,   59,   59,   59,  177,
  125,   40,   41,   33,   91,   44,   59,   59,   38,   59,
   40,   59,   42,   43,   30,   45,   48,   38,  264,  265,
   52,   33,  123,   94,  125,  126,   38,   91,   40,   59,
   42,   43,   48,   45,    0,  123,  270,  125,  126,  231,
   56,  257,  261,  262,  263,  124,  293,   59,   61,  257,
  234,  231,   91,  231,  293,   61,  303,   73,   24,  257,
  240,  271,  268,  269,  303,  302,  270,  271,   40,   41,
   42,   41,   44,  296,  297,  202,  203,   44,  257,   37,
  260,  320,  260,  257,   42,   93,   58,   59,  257,   47,
   56,  204,  205,  123,  307,  125,  126,   58,  257,  258,
  259,  260,  294,  262,  263,  318,  308,   73,   33,  257,
   59,  123,  257,   38,  126,   40,  257,   42,   43,   91,
   45,   41,  302,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  257,  303,  304,  305,  257,  307,  308,
  309,  310,  311,  312,  313,  314,  257,  258,  259,  260,
  126,  262,  263,   40,   41,   42,   58,  266,  267,  257,
  258,  259,  260,   41,  262,  263,   44,  206,  207,  208,
  209,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  126,  303,  304,  305,   41,  307,  308,  309,  310,
  311,  312,  313,  314,   91,  303,  304,  305,  257,  307,
  308,  309,  310,  311,  312,  313,  314,  257,  258,  259,
  260,   41,  262,  263,   44,   40,   41,   42,   41,   44,
   41,   44,  257,   44,   40,  257,  258,  259,  260,   41,
  262,  263,   44,   58,   59,   40,   41,   42,   41,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,   41,
  210,  211,   44,  303,  304,  305,   41,  307,  308,  309,
  310,  311,  312,  313,  314,  257,   91,   41,   41,   93,
   44,  303,  304,  305,   93,  307,  308,  309,  310,  311,
  312,  313,  314,   40,  306,   42,   91,   59,   41,   41,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   41,  212,  257,  258,  259,  260,   41,  262,  263,   44,
   41,   41,   41,   44,   44,   44,  158,   41,  213,   41,
   44,  214,  216,  215,   69,  130,  294,  282,   62,  150,
  240,   -1,  126,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   24,   41,   -1,
  257,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   41,
   -1,   -1,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   33,   -1,   44,
   -1,   -1,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,   -1,  257,   58,   59,  282,   61,   -1,   -1,   -1,
  123,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,   -1,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   -1,  123,   -1,
  257,   -1,   40,   41,   42,   -1,   44,  123,   -1,  125,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   85,   -1,
   -1,   59,   -1,   -1,   -1,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  257,   -1,   40,   41,   42,
   -1,   -1,   -1,   91,   -1,   -1,   -1,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,   -1,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  157,   -1,   -1,   -1,   -1,   -1,   -1,  164,   91,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,   -1,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,  257,  258,  259,  260,   -1,  262,  263,   -1,   -1,
   -1,   -1,   -1,   -1,  221,   -1,   -1,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   61,   -1,   -1,
   38,   -1,  249,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   77,   78,   79,   80,   40,   41,   42,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   37,   38,  257,
   40,  105,   42,   43,   44,   45,   46,   47,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   59,
   60,   61,   62,   63,  311,  312,  313,   -1,   91,   61,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  257,  149,  124,  125,   -1,  336,
   -1,   91,   -1,   -1,   94,  342,   -1,   -1,  345,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   -1,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,   58,   59,   60,   61,   62,
   63,  123,   -1,   -1,   -1,  199,  200,  201,  202,  203,
  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
  214,  215,  216,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   93,   94,   41,  227,   43,   44,   45,   -1,  232,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,  259,   37,   38,   -1,   -1,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   94,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,  293,
  268,  269,  270,  271,  257,   -1,   -1,   41,   -1,  303,
   44,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,   93,   94,   58,   59,  320,   -1,   -1,   63,
   -1,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,   -1,  124,  125,   -1,   -1,   -1,   -1,   93,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,  125,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,   38,
   -1,   -1,   41,   -1,   43,   44,   45,   38,   -1,   -1,
   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   58,
   59,   60,   -1,   62,   63,   93,   -1,   58,   59,   60,
   -1,   62,   63,   -1,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   93,   94,   -1,   -1,  126,   -1,
   -1,   -1,   93,   94,   58,   59,   60,   -1,   62,   63,
   -1,   -1,   -1,  264,  265,  266,  267,  268,  269,  270,
  271,   38,   -1,   -1,   41,  124,  125,   44,   -1,   38,
   -1,   -1,   41,  124,  125,   44,   -1,   -1,   -1,   93,
   94,   58,   59,   60,   -1,   62,   63,   -1,   -1,   58,
   59,   60,   -1,   62,   63,   -1,  270,  271,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   38,   -1,   -1,   41,
  124,  125,   44,   -1,   -1,   -1,   93,   94,   58,   59,
   60,   -1,   62,   63,   93,   94,   58,   59,   60,   33,
   62,   63,   -1,   -1,   38,   -1,   40,   41,   42,   43,
   -1,   45,   -1,   38,   -1,   -1,   41,  124,  125,   44,
   -1,   -1,   -1,   93,   94,  124,  125,   -1,   -1,   -1,
   -1,   93,   94,   58,   59,   60,   -1,   62,   63,  257,
  258,  259,  260,   -1,  262,  263,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,  124,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   -1,   58,   59,   93,   94,
   -1,   63,   -1,   -1,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,  264,  265,  266,  267,  268,  269,  270,
  271,   38,  126,   -1,   41,   -1,   -1,   44,   -1,  124,
  125,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   -1,   62,   63,   -1,   -1,   -1,
  264,  265,  266,  267,  268,  269,  270,  271,   38,   -1,
   -1,   41,  124,  125,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   94,   58,   59,
   60,   -1,   62,   63,   -1,   -1,   -1,  264,  265,  266,
  267,  268,  269,  270,  271,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,  124,  125,   -1,
   33,   -1,   -1,   93,   94,   38,   -1,   40,   -1,   42,
   43,   -1,   45,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   -1,   -1,  266,  267,  268,  269,  270,  271,
   38,   -1,   -1,   41,  124,  125,   44,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,  263,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   93,  266,  267,  268,  269,  270,  271,   38,   -1,   38,
   41,   -1,   41,   44,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   58,   59,   58,
   59,   -1,   63,  126,   63,   33,  268,  269,  270,  271,
   38,   -1,   40,   33,   42,   43,   -1,   45,   38,   -1,
   40,   -1,   42,   43,   -1,   45,  124,  125,   -1,   -1,
   -1,   33,   93,   94,   93,   94,   38,   -1,   40,   59,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  266,
  267,  268,  269,  270,  271,   -1,   -1,   59,   -1,   -1,
   -1,   -1,   33,  124,  125,  124,  125,   38,   -1,   40,
   33,   42,   43,   -1,   45,   38,   -1,   40,   41,   42,
   43,   -1,   45,   -1,   -1,   -1,  266,  267,  268,  269,
  270,  271,   33,   -1,   -1,  123,   -1,   38,  126,   40,
   33,   42,   43,   -1,   45,   38,  126,   40,   33,   42,
   43,   -1,   45,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,   93,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,  257,  258,  259,  260,   -1,  262,
  263,   -1,   41,   -1,   -1,   44,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,  126,   -1,   -1,   -1,   58,
   59,   -1,   -1,  126,   63,   -1,   -1,   -1,   -1,   -1,
  268,  269,  270,  271,   -1,   -1,   90,   91,   -1,   -1,
   -1,   41,   93,   94,   44,  126,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   93,   -1,   -1,   -1,   58,   59,
   -1,  126,   -1,   63,   -1,   -1,   -1,   -1,   -1,  270,
  271,  270,  271,  124,  125,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,  257,
  258,  259,  260,   93,  262,  263,   -1,  257,  258,  259,
  260,   -1,  262,  263,  158,   -1,  160,   23,   -1,   -1,
   -1,  165,  166,  167,  123,  257,  258,  259,  260,   41,
  262,  263,   44,   -1,  124,  125,   -1,   43,   -1,   -1,
  184,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   58,   -1,  125,   -1,  257,  258,  259,  260,
   41,  262,  263,   44,  257,  258,  259,  260,   -1,  262,
  263,   -1,   -1,  217,   -1,   -1,   -1,   58,   59,   -1,
   -1,   93,   63,   -1,   -1,   91,  257,  258,  259,  260,
   -1,  262,  263,   -1,  257,  258,  259,  260,   41,  262,
  263,   44,  257,  258,  259,  260,   -1,  262,  263,   -1,
   -1,   -1,   93,  125,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,   -1,   -1,  130,  131,  132,  133,   -1,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  270,  271,   -1,  125,   -1,   -1,  282,   -1,   -1,
   93,   -1,  158,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,
  314,  315,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  270,  271,  125,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  282,   -1,   -1,   -1,   -1,  222,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,
  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,
};
}
final static short YYFINAL=24;
final static short YYMAXTOKEN=338;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'",null,null,null,"'%'","'&'",null,"'('","')'","'*'","'+'",
"','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,"':'",
"';'","'<'","'='","'>'","'?'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,"'['",null,"']'","'^'",null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,"IDENTIFIER","CONSTANT",
"STRING_LITERAL","SIZEOF","PTR_OP","INC_OP","DEC_OP","LEFT_OP","RIGHT_OP",
"LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN",
"MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN",
"AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPE_NAME","TYPEDEF","EXTERN","STATIC",
"AUTO","REGISTER","CHAR","SHORT","INT","LONG","SIGNED","UNSIGNED","FLOAT",
"DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION","ENUM","ELLIPSIS","CASE",
"DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO","CONTINUE","BREAK",
"RETURN","SEMICOLON","BRACELEFT","BRACERIGHT","COMMA","COLON","EQUAL","RBLEFT",
"RBRIGHT","BRACKETLEFT","BRACKETRIGHT","DOT","AMP","EXCL","TILDE","MINUS",
"PLUS","STAR","SLASH","PERCENT","LESS","GREATER","CARET","BAR","QUESTION",
};
final static String yyrule[] = {
"$accept : translation_unit",
"primary_expression : IDENTIFIER",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : '(' expression ')'",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression '[' expression ']'",
"postfix_expression : postfix_expression '(' ')'",
"postfix_expression : postfix_expression '(' argument_expression_list ')'",
"postfix_expression : postfix_expression '.' IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP IDENTIFIER",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list ',' assignment_expression",
"unary_expression : postfix_expression",
"unary_expression : INC_OP unary_expression",
"unary_expression : DEC_OP unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF '(' type_name ')'",
"unary_operator : '&'",
"unary_operator : '*'",
"unary_operator : '+'",
"unary_operator : '-'",
"unary_operator : '~'",
"unary_operator : '!'",
"cast_expression : unary_expression",
"cast_expression : '(' type_name ')' cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression '*' cast_expression",
"multiplicative_expression : multiplicative_expression '/' cast_expression",
"multiplicative_expression : multiplicative_expression '%' cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression '+' multiplicative_expression",
"additive_expression : additive_expression '-' multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression '<' shift_expression",
"relational_expression : relational_expression '>' shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression '&' equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression '^' and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression '?' expression ':' conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : '='",
"assignment_operator : MUL_ASSIGN",
"assignment_operator : DIV_ASSIGN",
"assignment_operator : MOD_ASSIGN",
"assignment_operator : ADD_ASSIGN",
"assignment_operator : SUB_ASSIGN",
"assignment_operator : LEFT_ASSIGN",
"assignment_operator : RIGHT_ASSIGN",
"assignment_operator : AND_ASSIGN",
"assignment_operator : XOR_ASSIGN",
"assignment_operator : OR_ASSIGN",
"expression : assignment_expression",
"expression : expression ',' assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers ';'",
"declaration : declaration_specifiers init_declarator_list ';'",
"declaration_specifiers : storage_class_specifier",
"declaration_specifiers : storage_class_specifier declaration_specifiers",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"declaration_specifiers : type_qualifier",
"declaration_specifiers : type_qualifier declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list ',' init_declarator",
"init_declarator : declarator",
"init_declarator : declarator '=' initializer",
"storage_class_specifier : TYPEDEF",
"storage_class_specifier : EXTERN",
"storage_class_specifier : STATIC",
"storage_class_specifier : AUTO",
"storage_class_specifier : REGISTER",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : struct_or_union_specifier",
"type_specifier : enum_specifier",
"type_specifier : TYPE_NAME",
"struct_or_union_specifier : struct_or_union IDENTIFIER '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union '{' struct_declaration_list '}'",
"struct_or_union_specifier : struct_or_union IDENTIFIER",
"struct_or_union : STRUCT",
"struct_or_union : UNION",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : specifier_qualifier_list struct_declarator_list ';'",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : type_qualifier specifier_qualifier_list",
"specifier_qualifier_list : type_qualifier",
"struct_declarator_list : struct_declarator",
"struct_declarator_list : struct_declarator_list ',' struct_declarator",
"struct_declarator : declarator",
"struct_declarator : ':' constant_expression",
"struct_declarator : declarator ':' constant_expression",
"enum_specifier : ENUM '{' enumerator_list '}'",
"enum_specifier : ENUM IDENTIFIER '{' enumerator_list '}'",
"enum_specifier : ENUM IDENTIFIER",
"enumerator_list : enumerator",
"enumerator_list : enumerator_list ',' enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER '=' constant_expression",
"type_qualifier : CONST",
"type_qualifier : VOLATILE",
"declarator : pointer direct_declarator",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : '(' declarator ')'",
"direct_declarator : direct_declarator '[' constant_expression ']'",
"direct_declarator : direct_declarator '[' ']'",
"direct_declarator : direct_declarator '(' parameter_type_list ')'",
"direct_declarator : direct_declarator '(' identifier_list ')'",
"direct_declarator : direct_declarator '(' ')'",
"pointer : '*'",
"pointer : '*' type_qualifier_list",
"pointer : '*' pointer",
"pointer : '*' type_qualifier_list pointer",
"type_qualifier_list : type_qualifier",
"type_qualifier_list : type_qualifier_list type_qualifier",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list ',' ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list ',' parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers abstract_declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list ',' IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list abstract_declarator",
"abstract_declarator : pointer",
"abstract_declarator : direct_abstract_declarator",
"abstract_declarator : pointer direct_abstract_declarator",
"direct_abstract_declarator : '(' abstract_declarator ')'",
"direct_abstract_declarator : '[' ']'",
"direct_abstract_declarator : '[' constant_expression ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' ']'",
"direct_abstract_declarator : direct_abstract_declarator '[' constant_expression ']'",
"direct_abstract_declarator : '(' ')'",
"direct_abstract_declarator : '(' parameter_type_list ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' ')'",
"direct_abstract_declarator : direct_abstract_declarator '(' parameter_type_list ')'",
"initializer : assignment_expression",
"initializer : '{' initializer_list '}'",
"initializer : '{' initializer_list ',' '}'",
"initializer_list : initializer",
"initializer_list : initializer_list ',' initializer",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : IDENTIFIER ':' statement",
"labeled_statement : CASE constant_expression ':' statement",
"labeled_statement : DEFAULT ':' statement",
"compound_statement : '{' '}'",
"compound_statement : '{' statement_list '}'",
"compound_statement : '{' declaration_list '}'",
"compound_statement : '{' declaration_list statement_list '}'",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"statement_list : statement",
"statement_list : statement_list statement",
"expression_statement : ';'",
"expression_statement : expression ';'",
"selection_statement : IF '(' expression ')' statement ELSE statement",
"selection_statement : SWITCH '(' expression ')' statement",
"iteration_statement : WHILE '(' expression ')' statement",
"iteration_statement : DO statement WHILE '(' expression ')' ';'",
"iteration_statement : FOR '(' expression_statement expression_statement ')' statement",
"iteration_statement : FOR '(' expression_statement expression_statement expression ')' statement",
"jump_statement : GOTO IDENTIFIER ';'",
"jump_statement : CONTINUE ';'",
"jump_statement : BREAK ';'",
"jump_statement : RETURN ';'",
"jump_statement : RETURN expression ';'",
"translation_unit : external_declaration",
"translation_unit : translation_unit external_declaration",
"external_declaration : function_definition",
"external_declaration : declaration",
"function_definition : declaration_specifiers declarator declaration_list compound_statement",
"function_definition : declaration_specifiers declarator compound_statement",
"function_definition : declarator declaration_list compound_statement",
"function_definition : declarator compound_statement",
};

//#line 438 "grammar.y"

  private Yylex lexer;


  private int yylex () {
    int yyl_return = -1;
    try {
      yylval = new ParserVal(0);
      yyl_return = lexer.yylex();
    }
    catch (IOException e) {
      System.err.println("IO error :"+e);
    }
    return yyl_return;
  }


  public void yyerror (String error) {
    System.err.println ("Error: " + error);
  }


  public Parser(Reader r) {
    lexer = new Yylex(r, this);
  }


  static boolean interactive;

  public static void main(String args[]) throws IOException {
    System.out.println("BYACC/Java with JFlex Calculator Demo");

    Parser yyparser;
    if ( args.length > 0 ) {
      // parse a file
      yyparser = new Parser(new FileReader(args[0]));
    }
    else {
      // interactive mode
      System.out.println("[Quit with CTRL-D]");
      System.out.print("Expression: ");
      interactive = true;
	    yyparser = new Parser(new InputStreamReader(System.in));
    }

    yyparser.yyparse();
    
    if (interactive) {
      System.out.println();
      System.out.println("Have a nice day");
    }
  }
//#line 1100 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
