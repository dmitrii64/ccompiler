//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package edu.eltech.moevm.autogen;



//#line 15 "grammar.y"
  import java.io.*;
  import edu.eltech.moevm.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IDENTIFIER=257;
public final static short CONSTANT=258;
public final static short STRING_LITERAL=259;
public final static short SIZEOF=260;
public final static short PTR_OP=261;
public final static short INC_OP=262;
public final static short DEC_OP=263;
public final static short LEFT_OP=264;
public final static short RIGHT_OP=265;
public final static short LE_OP=266;
public final static short GE_OP=267;
public final static short EQ_OP=268;
public final static short NE_OP=269;
public final static short AND_OP=270;
public final static short OR_OP=271;
public final static short TYPE_NAME=272;
public final static short TYPEDEF=273;
public final static short STATIC=274;
public final static short AUTO=275;
public final static short REGISTER=276;
public final static short CHAR=277;
public final static short SHORT=278;
public final static short INT=279;
public final static short LONG=280;
public final static short SIGNED=281;
public final static short UNSIGNED=282;
public final static short FLOAT=283;
public final static short DOUBLE=284;
public final static short CONST=285;
public final static short VOID=286;
public final static short STRUCT=287;
public final static short UNION=288;
public final static short ENUM=289;
public final static short ELLIPSIS=290;
public final static short CASE=291;
public final static short DEFAULT=292;
public final static short IF=293;
public final static short ELSE=294;
public final static short SWITCH=295;
public final static short WHILE=296;
public final static short DO=297;
public final static short FOR=298;
public final static short GOTO=299;
public final static short BREAK=300;
public final static short RETURN=301;
public final static short SEMICOLON=302;
public final static short BRACELEFT=303;
public final static short BRACERIGHT=304;
public final static short COMMA=305;
public final static short COLON=306;
public final static short EQUAL=307;
public final static short RBLEFT=308;
public final static short RBRIGHT=309;
public final static short BRACKETLEFT=310;
public final static short BRACKETRIGHT=311;
public final static short DOT=312;
public final static short AMP=313;
public final static short EXCL=314;
public final static short MINUS=315;
public final static short PLUS=316;
public final static short STAR=317;
public final static short SLASH=318;
public final static short PERCENT=319;
public final static short LESS=320;
public final static short GREATER=321;
public final static short CARET=322;
public final static short BAR=323;
public final static short QUESTION=324;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    4,    4,    6,    6,    6,    6,    6,    6,
    7,    7,    7,    7,    7,    8,    8,   10,   10,   10,
   10,   11,   11,   11,   12,   12,   12,   13,   13,   13,
   13,   13,   14,   14,   14,   15,   15,   16,   16,   17,
   17,   18,   18,   19,   19,   20,   20,    5,    5,    2,
    2,   21,   22,   22,   23,   23,   23,   23,   23,   23,
   24,   24,   27,   27,   25,   25,   25,   25,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   30,   30,
   30,   30,   28,   28,   32,   32,   32,   32,   32,   32,
   32,   31,   31,   31,   31,   33,   33,   35,   35,   36,
   36,   36,   34,   34,    9,    9,   37,   37,   37,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   29,   29,
   29,   39,   39,   40,   40,   40,   40,   40,   40,   41,
   41,   41,   42,   42,   42,   42,   48,   48,   47,   47,
   43,   43,   44,   44,   45,   45,   45,   45,   46,   46,
   46,   46,    0,    0,   49,   49,   50,   50,   50,   50,
};
final static short yylen[] = {                            2,
    1,    1,    1,    3,    1,    4,    3,    4,    3,    3,
    2,    2,    1,    3,    1,    2,    2,    2,    2,    4,
    1,    1,    1,    1,    1,    1,    4,    1,    3,    3,
    3,    1,    3,    3,    1,    3,    3,    1,    3,    3,
    3,    3,    1,    3,    3,    1,    3,    1,    3,    1,
    3,    1,    3,    1,    3,    1,    5,    1,    3,    1,
    3,    1,    2,    3,    1,    2,    1,    2,    1,    2,
    1,    3,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    1,    2,    1,    1,    3,    4,    3,    4,    4,
    3,    1,    2,    2,    3,    1,    3,    1,    3,    2,
    2,    1,    1,    3,    1,    2,    1,    1,    2,    3,
    2,    3,    3,    4,    2,    3,    3,    4,    1,    3,
    4,    1,    3,    1,    1,    1,    1,    1,    1,    3,
    4,    3,    2,    3,    3,    4,    1,    2,    1,    2,
    1,    2,    7,    5,    5,    7,    6,    7,    3,    2,
    2,    3,    1,    2,    1,    1,    4,    3,    3,    2,
};
final static short yydefred[] = {                         0,
   95,   88,   75,   76,   77,   78,   80,   81,   82,   83,
   86,   87,   84,   85,    0,   79,    0,    0,    0,  166,
    0,    0,    0,    0,    0,    0,  163,  165,   70,    0,
    0,  104,  164,   63,    0,   71,    0,   66,   68,    0,
  147,    0,  170,    0,    0,    0,    0,   96,  105,   64,
    0,    0,  168,    0,    0,    2,    3,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  151,  143,    0,   21,   25,   24,   23,   22,    5,    0,
    0,   60,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   58,  149,  134,  135,  136,
  137,  138,  139,    0,    0,    0,  148,  169,  113,  101,
    0,    0,    0,    0,  108,    1,   98,   26,   62,    0,
   72,    0,  129,   74,  167,    0,    0,   19,    0,   16,
   17,    0,    0,    0,    0,    0,    0,    0,    0,  160,
  161,    0,    0,    0,    0,    0,    0,  152,    0,    0,
   11,   12,    0,    0,    0,    0,   18,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  144,  150,  145,    0,
    0,    0,  110,    0,  111,    0,   99,    0,  100,    0,
   97,  132,    0,  140,    0,    0,  142,    0,    0,    0,
    0,    0,  159,  162,   91,    4,    0,   89,    0,    0,
  116,   61,   10,    7,    0,   13,    0,    9,   59,   29,
   30,   31,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  146,  125,
    0,    0,  121,    0,    0,    0,    0,  114,  107,  109,
  130,    0,   20,  141,    0,    0,    0,    0,    0,   27,
    0,    8,    6,    0,  126,  120,  122,  127,    0,  123,
    0,  131,  133,    0,  154,  155,    0,    0,    0,   14,
   57,  128,  124,    0,    0,  157,    0,  153,  156,  158,
};
final static short yydgoto[] = {                         19,
   79,   80,   81,  215,   82,   83,   84,   85,  145,   86,
   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
  120,   41,   42,   35,   22,   23,   36,   24,  124,  147,
   25,   26,  241,  113,  114,  115,  242,  186,  193,   97,
   98,   99,  100,  101,  102,  103,  104,   44,   27,   28,
};
final static short yysindex[] = {                       331,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1426,    0, -129, -268,  331,    0,
 -145, 1426, 1426, 1392, -222, -149,    0,    0,    0, -288,
 -283,    0,    0,    0, -273,    0, 1356,    0,    0,   33,
    0, -145,    0, 1392, -149, 1227, -206,    0,    0,    0,
 -129,  709,    0, 1392, -256,    0,    0,  822,  832,  832,
  842, -242, -265, -237, -232,  327, -217,  -90, -170,  719,
    0,    0,  374,    0,    0,    0,    0,    0,    0, -175,
  -49,    0, -118,  842,    0,  -79,   23,   78, -207,   76,
 -112, -113, -107,   -8, -223,    0,    0,    0,    0,    0,
    0,    0,    0,  182,   94,   -9,    0,    0,    0,    0,
 -230,  -30, -263,   -1,    0,    0,    0,    0,    0,   16,
    0,  709,    0,    0,    0,  327,  374,    0,  842,    0,
    0,   34,  327,  842,  842,  842,   59,  729,   82,    0,
    0, -121, 1186, -215,   79, 1186, -137,    0,  842,  142,
    0,    0,  739,  842,  143,  842,    0,  842,  842,  842,
  842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
  842,  842,  842,  842,  842,  842,    0,    0,    0,  243,
  534,  -14,    0, -229,    0,  -56,    0,  144,    0, 1407,
    0,    0,   54,    0,   95,  327,    0, -183, -180, -147,
   97,  729,    0,    0,    0,    0,  842,    0, 1242,  -34,
    0,    0,    0,    0, -122,    0, -244,    0,    0,    0,
    0,    0,  -79,  -79,   23,   23,   78,   78,   78,   78,
 -207, -207,   76, -112, -113, -107,   -8,   55,    0,    0,
  112,  116,    0,   92,  -56, 1341,  751,    0,    0,    0,
    0, -139,    0,    0,  327,  327,  327,  842,  812,    0,
  842,    0,    0,  842,    0,    0,    0,    0,  117,    0,
  119,    0,    0,  138,    0,    0, -119,  327, -110,    0,
    0,    0,    0,  327,  104,    0,  327,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -213,    0,    0, -102,    0,    0,
    0,  -52,  126,    0,    0, 1288,    0,    0,    0,    0,
  199,    0,    0,    0,    0,    0,  -82,    0,    0,    0,
    0,    0,    0,    0, 1303,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -35,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  148,    0,  259,    0,    0,  397,  557,  894, 1013, 1082,
  871,  529,  807,  429,  118,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -82,    0,    0,    0,    0,
  -87,    0,    0,  124,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  202,    0,    0,  205,  128,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -68,    0,  -54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  458,  481,  618,  641,  917,  942,  965,  990,
 1036, 1059, 1105, 1128, 1151, 1174,  589,    0,    0,    0,
    0,    0,    0,    0,  -45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,  -61,    0,    0,  -50,  -22,    0,  -76,  319,  201,
  218,  155,  195,  276,  277,  275,  284,  285,    0,  -47,
  -28,   11,    1,    0,    0,  -58,  400,  -11,  -96,  123,
  -13,  -18,  -42,    0,    0,  272,  -89, -165,    0,  -63,
    0,  660, -125,    0,    0,    0,  371,  231,  468,    0,
};
final static int YYTABLESIZE=1712;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        119,
   21,  123,  137,  112,   32,   30,   45,  157,  142,   37,
   20,  144,  202,  119,  146,   29,   31,   49,  245,   21,
   48,  185,   38,   39,  118,  192,    1,    1,   50,   20,
  106,   51,  132,   18,    1,  128,  130,  131,  118,  106,
  178,  188,  134,   69,  245,  189,  111,  175,   18,  126,
  116,   56,   57,   58,  107,   59,   60,  211,  165,  166,
  149,  118,  194,  133,  107,  144,  263,  144,  146,  197,
  135,  123,  198,  199,  200,  136,  259,  181,  181,  182,
  182,  220,  221,  222,  146,   17,   18,  146,   69,  149,
  138,   69,  217,  206,   69,   69,   69,  184,  212,  183,
  176,   73,  216,   69,  117,  219,   74,   75,   76,   77,
   78,    1,  167,  168,  238,  107,  178,  116,   56,   57,
   58,  149,   59,   60,  149,  255,  148,    1,  256,  149,
  260,  140,  254,  210,  119,  118,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  244,  102,  273,   34,  149,   46,  118,
   47,  257,   17,  122,  272,   45,  139,  184,   73,   30,
  209,   18,  182,   74,   75,   76,   77,   78,   17,   18,
  204,  111,  261,  149,  118,  149,  262,   18,  156,  285,
  111,  274,  275,  276,  149,  210,  277,  279,  287,  119,
  171,  123,  102,  269,   65,  102,  102,  102,  172,  111,
  280,  150,  151,  152,  286,  173,  281,  112,  271,   73,
  288,  112,   73,  290,  118,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,  117,  158,  159,  160,
  117,  118,  116,   56,   57,   58,  111,   59,   60,   65,
  118,  246,   65,  247,  118,   65,   65,   65,  153,  119,
  154,  174,  155,  119,   65,  205,    1,   54,  208,    1,
  105,    1,    1,  209,    1,  182,    1,    1,  187,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,   55,
   56,   57,   58,   73,   59,   60,  243,   52,   74,   75,
   76,   77,   78,  190,    2,    3,    4,    5,    6,    7,
    8,    9,   10,   11,   12,   13,   14,   15,   16,  227,
  228,  229,  230,   61,   62,   63,  191,   64,   65,   66,
   67,   68,   69,   70,   71,   40,   72,  161,  162,  196,
   73,  163,  164,  169,  170,   74,   75,   76,   77,   78,
   55,   56,   57,   58,  201,   59,   60,  251,  252,  149,
  264,  223,  224,  231,  232,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
  225,  226,   67,  203,   61,   62,   63,  207,   64,   65,
   66,   67,   68,   69,   70,   71,   40,  179,  213,  218,
  248,   73,  267,  253,  258,  289,   74,   75,   76,   77,
   78,   15,   15,   15,   15,   15,   15,   15,   15,   56,
  265,   56,   56,   56,  266,  282,   56,   67,   56,  283,
   67,  284,  106,   67,   67,   67,  115,  117,   55,   56,
   57,   58,   67,   59,   60,  195,  233,  235,  234,   15,
  121,   15,   15,   15,   15,  103,   15,  236,   15,  237,
   15,  250,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   61,   62,   63,  180,   64,   65,   66,   67,
   68,   69,   70,   71,   40,  177,   33,    0,    0,   73,
    0,    0,    0,    0,   74,   75,   76,   77,   78,   55,
   56,   57,   58,  103,   59,   60,  103,  103,  103,   92,
   92,   92,   90,   90,   90,    0,    0,    0,   92,    0,
    0,   90,   26,   26,   26,   26,   26,   26,   26,   26,
    0,    0,    0,   61,   62,   63,    0,   64,   65,   66,
   67,   68,   69,   70,   71,   40,  239,    0,    0,    0,
   73,    0,    0,    0,    0,   74,   75,   76,   77,   78,
   26,    0,   26,   26,   26,    0,    0,   26,    0,   26,
    0,   26,    0,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   55,   56,   57,   58,    1,   59,   60,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   61,   62,   63,
    0,   64,   65,   66,   67,   68,   69,   70,   71,   40,
  116,   56,   57,   58,   73,   59,   60,    0,   17,   74,
   75,   76,   77,   78,    0,    2,    0,   18,    0,    0,
    7,    8,    9,   10,   11,   12,   13,   14,  143,   16,
   32,   32,   32,   32,   32,   32,   32,   32,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,   43,    0,    0,   74,   75,   76,   77,
   78,    0,    0,    0,    0,    0,   53,    0,   32,   54,
   32,   32,   32,  108,    0,   32,    0,   32,    0,   32,
    0,   32,   32,  125,    0,    0,   32,   32,   32,   32,
   32,   34,   34,   34,   34,   34,   34,   34,   34,    0,
   54,    0,   54,   54,   54,    0,    0,   54,    0,   54,
    0,    0,    0,    0,   33,   33,   33,   33,   33,   33,
   33,   33,   54,    0,    0,    0,    0,    0,    0,   34,
    0,   34,   34,   34,    0,    0,   34,    0,   34,    0,
   34,    0,   34,   34,    0,    0,    0,   34,   34,   34,
   34,   34,   33,    0,   33,   33,   33,    0,    0,   33,
    1,   33,    0,   33,    0,   33,   33,    0,   50,   50,
   33,   33,   33,   33,   33,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   35,   35,   35,   35,   35,   35,   35,   35,    0,    0,
   50,    0,   50,   50,   50,    0,    0,   50,    0,   50,
    0,  181,  240,  182,    0,    0,    0,    0,    0,    0,
   18,   50,   50,    0,    0,    0,    0,    0,   35,   55,
   35,   35,   35,    0,    0,   35,    0,   35,    0,   35,
    0,    0,    0,    0,    0,    0,   35,   35,   35,   35,
   35,   36,   36,   36,   36,   36,   36,   36,   36,    0,
   55,    0,   55,   55,   55,    0,    0,   55,    0,   55,
    0,    0,    0,    0,   37,   37,   37,   37,   37,   37,
   37,   37,   55,    0,    0,    0,    0,    0,    0,   36,
    0,   36,   36,   36,    0,    0,   36,    0,   36,    0,
   36,    0,    0,    0,    0,    0,    0,   36,   36,   36,
   36,   36,   37,    0,   37,   37,   37,    0,    0,   37,
    0,   37,    0,   37,    0,    0,    0,    0,    0,    0,
   37,   37,   37,   37,   37,  116,   56,   57,   58,    0,
   59,   60,    0,    0,    0,  116,   56,   57,   58,    0,
   59,   60,    0,    0,    0,  116,   56,   57,   58,    0,
   59,   60,    0,    0,    0,  116,   56,   57,   58,    0,
   59,   60,    0,    0,    0,    0,    0,  116,   56,   57,
   58,  122,   59,   60,    0,    0,   73,    0,    0,    0,
  141,   74,   75,   76,   77,   78,   73,    0,    0,    0,
   71,   74,   75,   76,   77,   78,   73,    0,    0,    0,
    0,   74,   75,   76,   77,   78,   73,  214,    0,    0,
    0,   74,   75,   76,   77,   78,    0,    0,   73,    0,
    0,  270,    0,   74,   75,   76,   77,   78,  116,   56,
   57,   58,    0,   59,   60,    0,   52,   52,  116,   56,
   57,   58,    0,   59,   60,    0,    0,    0,  116,   56,
   57,   58,    0,   59,   60,    0,    0,    0,  116,   56,
   57,   58,    0,   59,   60,    0,    0,    0,   52,    0,
   52,   52,   52,    0,    0,   52,    0,   52,    0,   73,
  278,    0,    0,    0,   74,   75,   76,   77,   78,  127,
   52,    0,    0,    0,   74,   75,   76,   77,   78,  129,
   48,   48,    0,    0,   74,   75,   76,   77,   78,   73,
    0,    0,    0,    0,   74,   75,   76,   77,   78,   38,
   38,   38,   38,   38,   38,    0,    0,    0,    0,    0,
    0,    0,   48,    0,   48,   48,   48,    0,    0,   48,
    0,   48,   41,   41,   41,   41,   41,   41,    0,    0,
    0,    0,   48,   48,   48,   38,    0,   38,   38,   38,
    0,    0,   38,    0,   38,    0,   38,   42,   42,   42,
   42,   42,   42,   38,   38,   38,   38,   38,   41,    0,
   41,   41,   41,    0,    0,   41,    0,   41,    0,   41,
   39,   39,   39,   39,   39,   39,   41,   41,   41,   41,
   41,    0,    0,   42,    0,   42,   42,   42,    0,    0,
   42,    0,   42,    0,   42,   40,   40,   40,   40,   40,
   40,   42,   42,   42,   42,   42,   39,    0,   39,   39,
   39,    0,    0,   39,    0,   39,    0,   39,    0,    0,
   43,   43,   43,   43,   39,   39,   39,   39,   39,    0,
    0,   40,    0,   40,   40,   40,    0,    0,   40,    0,
   40,    0,   40,   44,   44,   44,   44,    0,    0,   40,
   40,   40,   40,   40,   43,    0,   43,   43,   43,    0,
    0,   43,    0,   43,    0,   43,   45,   45,   45,   45,
    0,    0,    0,    0,   43,   43,   43,   44,    0,   44,
   44,   44,    0,    0,   44,    0,   44,    0,   44,    0,
    0,   46,   46,    0,    0,    0,    0,   44,   44,   44,
   45,    0,   45,   45,   45,    0,    0,   45,    0,   45,
    0,   45,    0,    0,   47,   47,    0,    0,    0,    0,
   45,   45,   45,   46,    0,   46,   46,   46,    0,    0,
   46,    0,   46,    0,   46,    0,    0,   49,   49,    0,
    0,    0,    0,   46,   46,   46,   47,    0,   47,   47,
   47,    0,    0,   47,    0,   47,    0,   47,    0,    0,
   51,   51,    0,    0,    0,    0,   47,   47,   47,   49,
    0,   49,   49,   49,    0,    0,   49,    0,   49,    0,
    0,    0,    0,   53,   53,    0,    0,    0,    0,   49,
   49,   49,   51,    0,   51,   51,   51,    2,    0,   51,
    0,   51,    7,    8,    9,   10,   11,   12,   13,   14,
  143,   16,    0,   51,   51,   53,    0,   53,   53,   53,
    0,    0,   53,  109,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,    2,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,    0,    0,
    0,    0,    0,    0,    0,  110,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  209,
  240,  182,    0,    0,    0,    0,    0,    0,   18,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   93,   93,   93,   93,   93,   93,
   93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
   94,    0,   94,    0,   94,    0,   94,    0,    0,    0,
    0,    0,    0,    0,   93,   93,    0,   93,    0,   93,
    0,   93,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,    0,    0,    0,    0,    0,    0,    0,  268,
    0,    0,    0,    0,    0,    0,    0,    0,   40,    0,
    0,    0,   52,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,    2,    3,
    4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,    0,   40,    0,  249,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         47,
    0,   52,   66,   46,   18,   17,   25,   84,   70,   21,
    0,   73,  138,   61,   73,   15,  285,   31,  184,   19,
  309,  111,   22,   23,   47,  122,  257,  257,  302,   19,
   42,  305,   61,  317,  257,   58,   59,   60,   61,   51,
  104,  305,  308,  257,  210,  309,   46,  271,  317,  306,
  257,  258,  259,  260,   44,  262,  263,  147,  266,  267,
  305,   84,  126,  306,   54,  127,  311,  129,  127,  133,
  308,  122,  134,  135,  136,  308,  202,  308,  308,  310,
  310,  158,  159,  160,  143,  308,  317,  146,  302,  305,
  308,  305,  154,  309,  308,  309,  310,  111,  149,  111,
  324,  308,  153,  317,  311,  156,  313,  314,  315,  316,
  317,  257,  320,  321,  176,  105,  180,  257,  258,  259,
  260,  305,  262,  263,  305,  309,  302,  257,  309,  305,
  207,  302,  196,  147,  182,  158,  159,  160,  161,  162,
  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
  173,  174,  175,  182,  257,  252,  302,  305,  308,  182,
  310,  309,  308,  303,  304,  184,  257,  181,  308,  181,
  308,  317,  310,  313,  314,  315,  316,  317,  308,  317,
  302,  181,  305,  305,  207,  305,  309,  317,  307,  309,
  190,  255,  256,  257,  305,  209,  258,  259,  309,  247,
  313,  252,  305,  246,  257,  308,  309,  310,  322,  209,
  261,  261,  262,  263,  278,  323,  264,  305,  247,  302,
  284,  309,  305,  287,  247,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  305,  317,  318,  319,
  309,  264,  257,  258,  259,  260,  246,  262,  263,  302,
  305,  308,  305,  310,  309,  308,  309,  310,  308,  305,
  310,  270,  312,  309,  317,  143,  302,   37,  146,  305,
   40,  307,  308,  308,  310,  310,  312,  313,  309,  315,
  316,  317,  318,  319,  320,  321,  322,  323,  324,  257,
  258,  259,  260,  308,  262,  263,  311,  307,  313,  314,
  315,  316,  317,  305,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  165,
  166,  167,  168,  291,  292,  293,  311,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  315,  316,  306,
  308,  264,  265,  268,  269,  313,  314,  315,  316,  317,
  257,  258,  259,  260,  296,  262,  263,  304,  305,  305,
  306,  161,  162,  169,  170,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  163,  164,  257,  302,  291,  292,  293,  309,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  257,  257,
  257,  308,  311,  309,  308,  302,  313,  314,  315,  316,
  317,  264,  265,  266,  267,  268,  269,  270,  271,  302,
  309,  304,  305,  306,  309,  309,  309,  302,  311,  311,
  305,  294,  309,  308,  309,  310,  309,  309,  257,  258,
  259,  260,  317,  262,  263,  127,  171,  173,  172,  302,
   51,  304,  305,  306,  307,  257,  309,  174,  311,  175,
  313,  190,  315,  316,  317,  318,  319,  320,  321,  322,
  323,  324,  291,  292,  293,  105,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   19,   -1,   -1,  308,
   -1,   -1,   -1,   -1,  313,  314,  315,  316,  317,  257,
  258,  259,  260,  305,  262,  263,  308,  309,  310,  308,
  309,  310,  308,  309,  310,   -1,   -1,   -1,  317,   -1,
   -1,  317,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,  291,  292,  293,   -1,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,   -1,   -1,
  308,   -1,   -1,   -1,   -1,  313,  314,  315,  316,  317,
  302,   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,  316,  317,  318,  319,  320,  321,
  322,  323,  324,  257,  258,  259,  260,  257,  262,  263,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  291,  292,  293,
   -1,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  257,  258,  259,  260,  308,  262,  263,   -1,  308,  313,
  314,  315,  316,  317,   -1,  272,   -1,  317,   -1,   -1,
  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  308,   -1,   24,   -1,   -1,  313,  314,  315,  316,
  317,   -1,   -1,   -1,   -1,   -1,   37,   -1,  302,  271,
  304,  305,  306,   44,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,  316,   54,   -1,   -1,  320,  321,  322,  323,
  324,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  302,   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,  324,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,  316,   -1,   -1,   -1,  320,  321,  322,
  323,  324,  302,   -1,  304,  305,  306,   -1,   -1,  309,
  257,  311,   -1,  313,   -1,  315,  316,   -1,  270,  271,
  320,  321,  322,  323,  324,  272,  273,  274,  275,  276,
  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
  302,   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,
   -1,  308,  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,
  317,  323,  324,   -1,   -1,   -1,   -1,   -1,  302,  271,
  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,  313,
   -1,   -1,   -1,   -1,   -1,   -1,  320,  321,  322,  323,
  324,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
  302,   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,
   -1,   -1,   -1,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,  324,   -1,   -1,   -1,   -1,   -1,   -1,  302,
   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,
  313,   -1,   -1,   -1,   -1,   -1,   -1,  320,  321,  322,
  323,  324,  302,   -1,  304,  305,  306,   -1,   -1,  309,
   -1,  311,   -1,  313,   -1,   -1,   -1,   -1,   -1,   -1,
  320,  321,  322,  323,  324,  257,  258,  259,  260,   -1,
  262,  263,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,  263,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,  263,   -1,   -1,   -1,  257,  258,  259,  260,   -1,
  262,  263,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  303,  262,  263,   -1,   -1,  308,   -1,   -1,   -1,
  302,  313,  314,  315,  316,  317,  308,   -1,   -1,   -1,
  302,  313,  314,  315,  316,  317,  308,   -1,   -1,   -1,
   -1,  313,  314,  315,  316,  317,  308,  309,   -1,   -1,
   -1,  313,  314,  315,  316,  317,   -1,   -1,  308,   -1,
   -1,  311,   -1,  313,  314,  315,  316,  317,  257,  258,
  259,  260,   -1,  262,  263,   -1,  270,  271,  257,  258,
  259,  260,   -1,  262,  263,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,  262,  263,   -1,   -1,   -1,  257,  258,
  259,  260,   -1,  262,  263,   -1,   -1,   -1,  302,   -1,
  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,  308,
  309,   -1,   -1,   -1,  313,  314,  315,  316,  317,  308,
  324,   -1,   -1,   -1,  313,  314,  315,  316,  317,  308,
  270,  271,   -1,   -1,  313,  314,  315,  316,  317,  308,
   -1,   -1,   -1,   -1,  313,  314,  315,  316,  317,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  302,   -1,  304,  305,  306,   -1,   -1,  309,
   -1,  311,  266,  267,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,  322,  323,  324,  302,   -1,  304,  305,  306,
   -1,   -1,  309,   -1,  311,   -1,  313,  266,  267,  268,
  269,  270,  271,  320,  321,  322,  323,  324,  302,   -1,
  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,  313,
  266,  267,  268,  269,  270,  271,  320,  321,  322,  323,
  324,   -1,   -1,  302,   -1,  304,  305,  306,   -1,   -1,
  309,   -1,  311,   -1,  313,  266,  267,  268,  269,  270,
  271,  320,  321,  322,  323,  324,  302,   -1,  304,  305,
  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,   -1,
  268,  269,  270,  271,  320,  321,  322,  323,  324,   -1,
   -1,  302,   -1,  304,  305,  306,   -1,   -1,  309,   -1,
  311,   -1,  313,  268,  269,  270,  271,   -1,   -1,  320,
  321,  322,  323,  324,  302,   -1,  304,  305,  306,   -1,
   -1,  309,   -1,  311,   -1,  313,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,  322,  323,  324,  302,   -1,  304,
  305,  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
   -1,  270,  271,   -1,   -1,   -1,   -1,  322,  323,  324,
  302,   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,
   -1,  313,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,
  322,  323,  324,  302,   -1,  304,  305,  306,   -1,   -1,
  309,   -1,  311,   -1,  313,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,  322,  323,  324,  302,   -1,  304,  305,
  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  322,  323,  324,  302,
   -1,  304,  305,  306,   -1,   -1,  309,   -1,  311,   -1,
   -1,   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,  322,
  323,  324,  302,   -1,  304,  305,  306,  272,   -1,  309,
   -1,  311,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,   -1,  323,  324,  302,   -1,  304,  305,  306,
   -1,   -1,  309,  257,  311,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  324,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,  317,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,
  283,  284,  285,  286,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  282,  283,  284,  285,  286,  302,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  302,  303,   -1,  305,   -1,  307,
   -1,  309,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,  307,  272,  273,  274,  275,  276,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,  285,  286,   -1,  303,   -1,  290,  272,  273,  274,
  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,
};
}
final static short YYFINAL=19;
final static short YYMAXTOKEN=324;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IDENTIFIER","CONSTANT","STRING_LITERAL","SIZEOF","PTR_OP",
"INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","TYPE_NAME","TYPEDEF","STATIC","AUTO","REGISTER","CHAR","SHORT","INT",
"LONG","SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOID","STRUCT","UNION",
"ENUM","ELLIPSIS","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR",
"GOTO","BREAK","RETURN","SEMICOLON","BRACELEFT","BRACERIGHT","COMMA","COLON",
"EQUAL","RBLEFT","RBRIGHT","BRACKETLEFT","BRACKETRIGHT","DOT","AMP","EXCL",
"MINUS","PLUS","STAR","SLASH","PERCENT","LESS","GREATER","CARET","BAR",
"QUESTION",
};
final static String yyrule[] = {
"$accept : translation_unit",
"primary_expression : IDENTIFIER",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : RBLEFT expression RBRIGHT",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression BRACKETLEFT expression BRACKETRIGHT",
"postfix_expression : postfix_expression RBLEFT RBRIGHT",
"postfix_expression : postfix_expression RBLEFT argument_expression_list RBRIGHT",
"postfix_expression : postfix_expression DOT IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP IDENTIFIER",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list COMMA assignment_expression",
"unary_expression : postfix_expression",
"unary_expression : INC_OP unary_expression",
"unary_expression : DEC_OP unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF RBLEFT type_name RBRIGHT",
"unary_operator : AMP",
"unary_operator : STAR",
"unary_operator : PLUS",
"unary_operator : MINUS",
"unary_operator : EXCL",
"cast_expression : unary_expression",
"cast_expression : RBLEFT type_name RBRIGHT cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression STAR cast_expression",
"multiplicative_expression : multiplicative_expression SLASH cast_expression",
"multiplicative_expression : multiplicative_expression PERCENT cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression PLUS multiplicative_expression",
"additive_expression : additive_expression MINUS multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression LESS shift_expression",
"relational_expression : relational_expression GREATER shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression AMP equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression CARET and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression BAR exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression QUESTION expression COLON conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression EQUAL assignment_expression",
"expression : assignment_expression",
"expression : expression COMMA assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers SEMICOLON",
"declaration : declaration_specifiers init_declarator_list SEMICOLON",
"declaration_specifiers : storage_class_specifier",
"declaration_specifiers : storage_class_specifier declaration_specifiers",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"declaration_specifiers : CONST",
"declaration_specifiers : CONST declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list COMMA init_declarator",
"init_declarator : declarator",
"init_declarator : declarator EQUAL initializer",
"storage_class_specifier : TYPEDEF",
"storage_class_specifier : STATIC",
"storage_class_specifier : AUTO",
"storage_class_specifier : REGISTER",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : TYPE_NAME",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : CONST specifier_qualifier_list",
"specifier_qualifier_list : CONST",
"declarator : pointer direct_declarator",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : RBLEFT declarator RBRIGHT",
"direct_declarator : direct_declarator BRACKETLEFT constant_expression BRACKETRIGHT",
"direct_declarator : direct_declarator BRACKETLEFT BRACKETRIGHT",
"direct_declarator : direct_declarator RBLEFT parameter_type_list RBRIGHT",
"direct_declarator : direct_declarator RBLEFT identifier_list RBRIGHT",
"direct_declarator : direct_declarator RBLEFT RBRIGHT",
"pointer : STAR",
"pointer : STAR CONST",
"pointer : STAR pointer",
"pointer : STAR CONST pointer",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list COMMA ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list COMMA parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers abstract_declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list COMMA IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list abstract_declarator",
"abstract_declarator : pointer",
"abstract_declarator : direct_abstract_declarator",
"abstract_declarator : pointer direct_abstract_declarator",
"direct_abstract_declarator : RBLEFT abstract_declarator RBRIGHT",
"direct_abstract_declarator : BRACKETLEFT BRACKETRIGHT",
"direct_abstract_declarator : BRACKETLEFT constant_expression BRACKETRIGHT",
"direct_abstract_declarator : direct_abstract_declarator BRACKETLEFT BRACKETRIGHT",
"direct_abstract_declarator : direct_abstract_declarator BRACKETLEFT constant_expression BRACKETRIGHT",
"direct_abstract_declarator : RBLEFT RBRIGHT",
"direct_abstract_declarator : RBLEFT parameter_type_list RBRIGHT",
"direct_abstract_declarator : direct_abstract_declarator RBLEFT RBRIGHT",
"direct_abstract_declarator : direct_abstract_declarator RBLEFT parameter_type_list RBRIGHT",
"initializer : assignment_expression",
"initializer : BRACELEFT initializer_list BRACERIGHT",
"initializer : BRACELEFT initializer_list COMMA BRACERIGHT",
"initializer_list : initializer",
"initializer_list : initializer_list COMMA initializer",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : IDENTIFIER COLON statement",
"labeled_statement : CASE constant_expression COLON statement",
"labeled_statement : DEFAULT COLON statement",
"compound_statement : BRACELEFT BRACERIGHT",
"compound_statement : BRACELEFT statement_list BRACERIGHT",
"compound_statement : BRACELEFT declaration_list BRACERIGHT",
"compound_statement : BRACELEFT declaration_list statement_list BRACERIGHT",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"statement_list : statement",
"statement_list : statement_list statement",
"expression_statement : SEMICOLON",
"expression_statement : expression SEMICOLON",
"selection_statement : IF RBLEFT expression RBRIGHT statement ELSE statement",
"selection_statement : SWITCH RBLEFT expression RBRIGHT statement",
"iteration_statement : WHILE RBLEFT expression RBRIGHT statement",
"iteration_statement : DO statement WHILE RBLEFT expression RBRIGHT SEMICOLON",
"iteration_statement : FOR RBLEFT expression_statement expression_statement RBRIGHT statement",
"iteration_statement : FOR RBLEFT expression_statement expression_statement expression RBRIGHT statement",
"jump_statement : GOTO IDENTIFIER SEMICOLON",
"jump_statement : BREAK SEMICOLON",
"jump_statement : RETURN SEMICOLON",
"jump_statement : RETURN expression SEMICOLON",
"translation_unit : external_declaration",
"translation_unit : translation_unit external_declaration",
"external_declaration : function_definition",
"external_declaration : declaration",
"function_definition : declaration_specifiers declarator declaration_list compound_statement",
"function_definition : declaration_specifiers declarator compound_statement",
"function_definition : declarator declaration_list compound_statement",
"function_definition : declarator compound_statement",
};

//#line 360 "grammar.y"

  private Yylex lexer;

  private int yylex () {
    int yyl_return = -1;
    try {
      yylval = new ParserVal(0);
      yyl_return = lexer.yylex();
    }
    catch (IOException e) {
      System.err.println("IO error :"+e);
    }
    return yyl_return;
  }


  public void yyerror (String error) {
    System.err.println ("Error: " + error);
  }


  public Parser(Reader r) {
    lexer = new Yylex(r, this);
  }

  public static void ParseFile(String file) throws IOException {
	System.out.println("Lexer:");
	Parser yyparser;
    yyparser = new Parser(new FileReader(file));
    //Tokenize input file (for debug)
	Yylex lexer = new Yylex(new FileReader(file));
	    int i = 1;
          while(i>0)
          {
              i = lexer.yylex();
              System.out.print(Parser.yyname[i]);
              System.out.print(" ");
          }
    System.out.println();

	System.out.println("Parser:");

  	//yyparser.yydebug = true;
  	yyparser.yyparse(); //Parsing goes here
  }
//#line 909 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 38 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 2:
//#line 39 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 3:
//#line 40 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 5:
//#line 45 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 6:
//#line 46 "grammar.y"
{ yyval = Translator.postfix_expression2(val_peek(3),val_peek(1)); }
break;
case 7:
//#line 47 "grammar.y"
{ yyval = Translator.postfix_expression3(val_peek(2)); }
break;
case 8:
//#line 48 "grammar.y"
{ yyval = Translator.postfix_expression4(val_peek(3),val_peek(1)); }
break;
case 13:
//#line 56 "grammar.y"
{ yyval = Translator.argument_expression_list1(val_peek(0)); }
break;
case 14:
//#line 57 "grammar.y"
{ yyval = Translator.argument_expression_list2(val_peek(2),val_peek(0)); }
break;
case 15:
//#line 61 "grammar.y"
{ yyval = Translator.unary_expression1(val_peek(0)); }
break;
case 16:
//#line 62 "grammar.y"
{ yyval = Translator.unary_expression2(val_peek(0)); }
break;
case 17:
//#line 63 "grammar.y"
{ yyval = Translator.unary_expression3(val_peek(0)); }
break;
case 18:
//#line 64 "grammar.y"
{ yyval = Translator.unary_expression4(val_peek(1),val_peek(0)); }
break;
case 19:
//#line 65 "grammar.y"
{ yyval = Translator.unary_expression5(val_peek(0)); }
break;
case 20:
//#line 66 "grammar.y"
{ yyval = Translator.unary_expression6(val_peek(1)); }
break;
case 21:
//#line 70 "grammar.y"
{ yyval = new ParserVal("&"); }
break;
case 22:
//#line 71 "grammar.y"
{ yyval = new ParserVal("*"); }
break;
case 23:
//#line 72 "grammar.y"
{ yyval = new ParserVal("+"); }
break;
case 24:
//#line 73 "grammar.y"
{ yyval = new ParserVal("-"); }
break;
case 25:
//#line 74 "grammar.y"
{ yyval = new ParserVal("!"); }
break;
case 26:
//#line 78 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 28:
//#line 83 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 29:
//#line 84 "grammar.y"
{ yyval = Translator.multiplicative_expression2(val_peek(2),val_peek(0)); }
break;
case 32:
//#line 90 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 33:
//#line 91 "grammar.y"
{ yyval = Translator.additive_expression2(val_peek(2),val_peek(0)); }
break;
case 34:
//#line 92 "grammar.y"
{ yyval = Translator.additive_expression3(val_peek(2),val_peek(0)); }
break;
case 35:
//#line 96 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 38:
//#line 102 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 43:
//#line 110 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 46:
//#line 116 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 48:
//#line 121 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 50:
//#line 126 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 52:
//#line 131 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 53:
//#line 132 "grammar.y"
{ yyval = Translator.logical_and_expression2(val_peek(2),val_peek(0)); }
break;
case 54:
//#line 136 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 55:
//#line 137 "grammar.y"
{ yyval = Translator.logical_or_expression2(val_peek(2),val_peek(0)); }
break;
case 56:
//#line 141 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 57:
//#line 142 "grammar.y"
{ yyval = Translator.conditional_expression2(val_peek(4),val_peek(3),val_peek(2)); }
break;
case 58:
//#line 146 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 59:
//#line 147 "grammar.y"
{ yyval = Translator.assignment_expression2(val_peek(2),val_peek(0)); }
break;
case 60:
//#line 151 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 61:
//#line 152 "grammar.y"
{ yyval = new ParserVal(val_peek(2).sval+"\n"+val_peek(1).sval); }
break;
case 63:
//#line 160 "grammar.y"
{ yyval = Translator.declaration1(val_peek(1)); }
break;
case 64:
//#line 161 "grammar.y"
{ yyval = Translator.declaration2(val_peek(2),val_peek(1)); }
break;
case 65:
//#line 165 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 66:
//#line 166 "grammar.y"
{ yyval = new ParserVal(val_peek(1).sval+" "+val_peek(0).sval); }
break;
case 67:
//#line 167 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 68:
//#line 168 "grammar.y"
{ yyval = new ParserVal(val_peek(1).sval+" "+val_peek(0).sval); }
break;
case 69:
//#line 169 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 70:
//#line 170 "grammar.y"
{ yyval = new ParserVal(val_peek(1).sval+" "+val_peek(0).sval); }
break;
case 71:
//#line 174 "grammar.y"
{ yyval = Translator.init_declarator_list1(val_peek(0)); }
break;
case 72:
//#line 175 "grammar.y"
{ yyval = Translator.init_declarator_list2(val_peek(2),val_peek(0)); }
break;
case 73:
//#line 179 "grammar.y"
{ yyval = Translator.init_declarator1(val_peek(0)); }
break;
case 74:
//#line 180 "grammar.y"
{ yyval = Translator.init_declarator2(val_peek(2),val_peek(0)); }
break;
case 79:
//#line 191 "grammar.y"
{ yyval = new ParserVal("VOID"); }
break;
case 80:
//#line 192 "grammar.y"
{ yyval = new ParserVal("CHAR"); }
break;
case 81:
//#line 193 "grammar.y"
{ yyval = new ParserVal("SHORT"); }
break;
case 82:
//#line 194 "grammar.y"
{ yyval = new ParserVal("INT"); }
break;
case 83:
//#line 195 "grammar.y"
{ yyval = new ParserVal("LONG"); }
break;
case 84:
//#line 196 "grammar.y"
{ yyval = new ParserVal("FLOAT"); }
break;
case 85:
//#line 197 "grammar.y"
{ yyval = new ParserVal("DOUBLE"); }
break;
case 86:
//#line 198 "grammar.y"
{ yyval = new ParserVal("SIGNED"); }
break;
case 87:
//#line 199 "grammar.y"
{ yyval = new ParserVal("UNSIGNED"); }
break;
case 88:
//#line 200 "grammar.y"
{ yyval = new ParserVal(val_peek(0)); }
break;
case 93:
//#line 211 "grammar.y"
{ yyval = Translator.declarator1(val_peek(1),val_peek(0)); }
break;
case 94:
//#line 212 "grammar.y"
{ yyval = Translator.declarator2(val_peek(0)); }
break;
case 95:
//#line 216 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 96:
//#line 217 "grammar.y"
{ yyval = Translator.direct_declarator2(val_peek(1)); }
break;
case 99:
//#line 220 "grammar.y"
{ yyval = Translator.direct_declarator5(val_peek(3),val_peek(1)); }
break;
case 106:
//#line 233 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 107:
//#line 234 "grammar.y"
{ yyval = new ParserVal(val_peek(2).sval); }
break;
case 108:
//#line 238 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 109:
//#line 239 "grammar.y"
{ yyval = new ParserVal(val_peek(2).sval+" "+val_peek(0).sval); }
break;
case 110:
//#line 243 "grammar.y"
{ yyval = Translator.parameter_declaration1(val_peek(1),val_peek(0)); }
break;
case 111:
//#line 244 "grammar.y"
{ yyval = Translator.parameter_declaration2(val_peek(1),val_peek(0)); }
break;
case 112:
//#line 245 "grammar.y"
{ yyval = Translator.parameter_declaration3(val_peek(0)); }
break;
case 113:
//#line 249 "grammar.y"
{ yyval = Translator.identifier_list1(val_peek(0)); }
break;
case 114:
//#line 250 "grammar.y"
{ yyval = Translator.identifier_list2(val_peek(2),val_peek(0)); }
break;
case 129:
//#line 277 "grammar.y"
{ yyval = Translator.initializer1(val_peek(0)); }
break;
case 130:
//#line 278 "grammar.y"
{ yyval = Translator.initializer2(val_peek(1)); }
break;
case 131:
//#line 279 "grammar.y"
{ yyval = Translator.initializer3(val_peek(2)); }
break;
case 132:
//#line 283 "grammar.y"
{ yyval = Translator.initializer_list1(val_peek(0)); }
break;
case 133:
//#line 284 "grammar.y"
{ yyval = Translator.initializer_list2(val_peek(2),val_peek(0)); }
break;
case 134:
//#line 288 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 135:
//#line 289 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 136:
//#line 290 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 137:
//#line 291 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 138:
//#line 292 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 139:
//#line 293 "grammar.y"
{ yyval = new ParserVal(val_peek(0).sval); }
break;
case 143:
//#line 303 "grammar.y"
{ yyval = Translator.compound_statement1(); }
break;
case 144:
//#line 304 "grammar.y"
{ yyval = Translator.compound_statement2(val_peek(1)); }
break;
case 145:
//#line 305 "grammar.y"
{ yyval = Translator.compound_statement3(val_peek(1)); }
break;
case 146:
//#line 306 "grammar.y"
{ yyval = Translator.compound_statement4(val_peek(2),val_peek(1)); }
break;
case 147:
//#line 310 "grammar.y"
{ yyval = Translator.declaration_list1(val_peek(0)); }
break;
case 148:
//#line 311 "grammar.y"
{ yyval = Translator.declaration_list2(val_peek(1),val_peek(0)); }
break;
case 149:
//#line 315 "grammar.y"
{ yyval = Translator.statement_list1(val_peek(0)); }
break;
case 150:
//#line 316 "grammar.y"
{ yyval = Translator.statement_list2(val_peek(1),val_peek(0)); }
break;
case 159:
//#line 337 "grammar.y"
{ yyval = Translator.jump_statement1(val_peek(1)); }
break;
case 160:
//#line 338 "grammar.y"
{ yyval = Translator.jump_statement2(); }
break;
case 161:
//#line 339 "grammar.y"
{ yyval = Translator.jump_statement3(); }
break;
case 162:
//#line 340 "grammar.y"
{ yyval = Translator.jump_statement4(val_peek(1)); }
break;
case 163:
//#line 344 "grammar.y"
{ yyval = Translator.translation_unit(val_peek(0)); System.out.println(yyval.sval); }
break;
case 164:
//#line 345 "grammar.y"
{ yyval = Translator.translation_unit(val_peek(0)); System.out.println(yyval.sval); }
break;
case 165:
//#line 349 "grammar.y"
{ yyval = Translator.external_declaration(val_peek(0)); }
break;
case 166:
//#line 350 "grammar.y"
{ yyval = Translator.external_declaration(val_peek(0)); }
break;
case 167:
//#line 354 "grammar.y"
{ yyval = Translator.function_definition1(val_peek(3),val_peek(2),val_peek(1),val_peek(0)); }
break;
case 168:
//#line 355 "grammar.y"
{ yyval = Translator.function_definition2(val_peek(2),val_peek(1),val_peek(0)); }
break;
case 169:
//#line 356 "grammar.y"
{ yyval = Translator.function_definition3(val_peek(2),val_peek(1),val_peek(0)); }
break;
case 170:
//#line 357 "grammar.y"
{ yyval = Translator.function_definition4(val_peek(1),val_peek(0)); }
break;
//#line 1494 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
