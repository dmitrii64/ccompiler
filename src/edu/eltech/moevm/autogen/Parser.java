//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package edu.eltech.moevm.autogen;



//#line 15 "grammar.y"
  import java.io.*;
//#line 19 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IDENTIFIER=257;
public final static short CONSTANT=258;
public final static short STRING_LITERAL=259;
public final static short SIZEOF=260;
public final static short PTR_OP=261;
public final static short INC_OP=262;
public final static short DEC_OP=263;
public final static short LEFT_OP=264;
public final static short RIGHT_OP=265;
public final static short LE_OP=266;
public final static short GE_OP=267;
public final static short EQ_OP=268;
public final static short NE_OP=269;
public final static short AND_OP=270;
public final static short OR_OP=271;
public final static short MUL_ASSIGN=272;
public final static short DIV_ASSIGN=273;
public final static short MOD_ASSIGN=274;
public final static short ADD_ASSIGN=275;
public final static short SUB_ASSIGN=276;
public final static short LEFT_ASSIGN=277;
public final static short RIGHT_ASSIGN=278;
public final static short AND_ASSIGN=279;
public final static short XOR_ASSIGN=280;
public final static short OR_ASSIGN=281;
public final static short TYPE_NAME=282;
public final static short TYPEDEF=283;
public final static short EXTERN=284;
public final static short STATIC=285;
public final static short AUTO=286;
public final static short REGISTER=287;
public final static short CHAR=288;
public final static short SHORT=289;
public final static short INT=290;
public final static short LONG=291;
public final static short SIGNED=292;
public final static short UNSIGNED=293;
public final static short FLOAT=294;
public final static short DOUBLE=295;
public final static short CONST=296;
public final static short VOLATILE=297;
public final static short VOID=298;
public final static short STRUCT=299;
public final static short UNION=300;
public final static short ENUM=301;
public final static short ELLIPSIS=302;
public final static short CASE=303;
public final static short DEFAULT=304;
public final static short IF=305;
public final static short ELSE=306;
public final static short SWITCH=307;
public final static short WHILE=308;
public final static short DO=309;
public final static short FOR=310;
public final static short GOTO=311;
public final static short CONTINUE=312;
public final static short BREAK=313;
public final static short RETURN=314;
public final static short SEMICOLON=315;
public final static short BRACELEFT=316;
public final static short BRACERIGHT=317;
public final static short COMMA=318;
public final static short COLON=319;
public final static short EQUAL=320;
public final static short RBLEFT=321;
public final static short RBRIGHT=322;
public final static short BRACKETLEFT=323;
public final static short BRACKETRIGHT=324;
public final static short DOT=325;
public final static short AMP=326;
public final static short EXCL=327;
public final static short TILDE=328;
public final static short MINUS=329;
public final static short PLUS=330;
public final static short STAR=331;
public final static short SLASH=332;
public final static short PERCENT=333;
public final static short LESS=334;
public final static short GREATER=335;
public final static short CARET=336;
public final static short BAR=337;
public final static short QUESTION=338;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    4,    4,    6,    6,    6,    6,    6,    6,
    7,    7,    7,    7,    7,    7,    8,    8,   10,   10,
   10,   10,   11,   11,   11,   12,   12,   12,   13,   13,
   13,   13,   13,   14,   14,   14,   15,   15,   16,   16,
   17,   17,   18,   18,   19,   19,   20,   20,    5,    5,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,    2,    2,   22,   23,   23,   24,   24,   24,   24,
   24,   24,   25,   25,   29,   29,   26,   26,   26,   26,
   26,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   32,   32,   32,   34,   34,   35,   35,
   36,   37,   37,   37,   37,   38,   38,   39,   39,   39,
   33,   33,   33,   40,   40,   41,   41,   28,   28,   30,
   30,   43,   43,   43,   43,   43,   43,   43,   42,   42,
   42,   42,   46,   46,   44,   44,   47,   47,   48,   48,
   48,   45,   45,    9,    9,   49,   49,   49,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   31,   31,   31,
   51,   51,   52,   52,   52,   52,   52,   52,   53,   53,
   53,   54,   54,   54,   54,   60,   60,   59,   59,   55,
   55,   56,   56,   57,   57,   57,   57,   58,   58,   58,
   58,   58,    0,    0,   61,   61,   62,   62,   62,   62,
};
final static short yylen[] = {                            2,
    1,    1,    1,    3,    1,    4,    3,    4,    3,    3,
    2,    2,    1,    3,    1,    2,    2,    2,    2,    4,
    1,    1,    1,    1,    1,    1,    1,    4,    1,    3,
    3,    3,    1,    3,    3,    1,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    5,    1,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    1,    2,    3,    1,    2,    1,    2,
    1,    2,    1,    3,    1,    3,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    5,    4,    2,    1,    1,    1,    2,
    3,    2,    1,    2,    1,    1,    3,    1,    2,    3,
    4,    5,    2,    1,    3,    1,    3,    1,    1,    2,
    1,    1,    3,    4,    3,    4,    4,    3,    1,    2,
    2,    3,    1,    2,    1,    3,    1,    3,    2,    2,
    1,    1,    3,    1,    2,    1,    1,    2,    3,    2,
    3,    3,    4,    2,    3,    3,    4,    1,    3,    4,
    1,    3,    1,    1,    1,    1,    1,    1,    3,    4,
    3,    2,    3,    3,    4,    1,    2,    1,    2,    1,
    2,    7,    5,    5,    7,    6,    7,    3,    2,    2,
    2,    3,    1,    2,    1,    1,    4,    3,    3,    2,
};
final static short yydefred[] = {                         0,
  132,  103,   87,   88,   89,   90,   91,   93,   94,   95,
   96,   99,  100,   97,   98,  128,  129,   92,  107,  108,
    0,    0,    0,    0,  206,    0,    0,    0,    0,    0,
  101,  102,    0,    0,    0,  203,  205,    0,    0,    0,
  143,  141,    0,  204,   75,    0,   83,    0,   78,   80,
   82,    0,  186,    0,  210,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  124,  133,  144,  142,   76,    0,
    0,  208,    0,    0,    2,    3,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  190,  182,    0,   21,   26,   25,   24,   23,   22,    5,
    0,    0,   72,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,  188,  173,  174,
  175,  176,  177,  178,    0,    0,    0,  187,  209,    0,
    0,    0,    0,  109,    0,  152,  138,    0,    0,    0,
    0,  147,    1,  135,   27,   74,    0,    0,    0,  121,
    0,   84,    0,  168,   86,  207,    0,    0,   19,    0,
   16,   17,    0,    0,    0,    0,    0,    0,    0,    0,
  199,  200,  201,    0,    0,    0,    0,  191,    0,    0,
   11,   12,    0,    0,    0,   62,   63,   64,   65,   66,
   67,   68,   69,   70,   71,   61,    0,   18,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  183,  189,  184,
    0,    0,  112,  114,  105,  110,    0,    0,    0,  116,
    0,    0,  149,    0,  150,    0,  136,    0,  137,    0,
  134,  122,  127,  125,  171,    0,  179,    0,    0,  181,
    0,    0,    0,    0,    0,  198,  202,    4,    0,    0,
    0,  155,   73,   10,    7,    0,   13,    0,    9,   60,
   30,   31,   32,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  185,
  104,  119,    0,  111,    0,  164,    0,    0,  160,    0,
    0,    0,    0,  153,  146,  148,  169,    0,   20,  180,
    0,    0,    0,    0,    0,   28,    0,    8,    6,    0,
  120,  117,  165,  159,  161,  166,    0,  162,    0,  170,
  172,    0,  193,  194,    0,    0,    0,   14,   58,  167,
  163,    0,    0,  196,    0,  192,  195,  197,
};
final static short yydgoto[] = {                         24,
  100,  101,  102,  266,  103,  104,  105,  106,  176,  107,
  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
  197,  147,   53,   54,   46,   27,   28,   29,   47,   30,
  155,   31,   32,   33,  133,  134,  135,  229,  230,   64,
   65,   34,   35,  297,  140,   43,  141,  142,  298,  236,
  246,  118,  119,  120,  121,  122,  123,  124,  125,   56,
   36,   37,
};
final static short yysindex[] = {                       652,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -222,  -96, -260,  652,    0, -192, 1861, 1861, 1861, 1805,
    0,    0, -218, -238,  -77,    0,    0, -219, -205, -194,
    0,    0, -260,    0,    0, -240,    0, 1706,    0,    0,
    0,  125,    0, -192,    0, 1805, -152, 1881,  -77, 1534,
 -138, -205, -185, -277,    0,    0,    0,    0,    0,  -96,
  917,    0, 1805, -149,    0,    0, 1015, 1069, 1069, 1090,
 -139, -110,  -70,  -61,  525,  -46,  -59,  -94,  -84,  940,
    0,    0,  350,    0,    0,    0,    0,    0,    0,    0,
 -181,  -67,    0,  721, 1090,    0,  -62, -270, -198, -204,
 -178,  -43,  -71,  -44,   72, -237,    0,    0,    0,    0,
    0,    0,    0,    0,   22,  200,   39,    0,    0, 1881,
 1881, 1881, 1739,    0, -115,    0,    0, -116,   38, -264,
   44,    0,    0,    0,    0,    0,   41,  -19, 1090,    0,
 -205,    0,  917,    0,    0,    0,  525,  350,    0, 1090,
    0,    0,   48,  525, 1090, 1090, 1090,   62,  964,   56,
    0,    0,    0, -143, -249,   64, -278,    0, 1090,  133,
    0,    0,  143, 1090,  134,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1090,    0, 1090, 1090,
 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
 1090, 1090, 1090, 1090, 1090, 1090, 1090,    0,    0,    0,
  495, 1769,    0,    0,    0,    0, 1090,   76, -133,    0,
  585,  641,    0, -206,    0,  -66,    0,  139,    0, 1840,
    0,    0,    0,    0,    0,   23,    0,   75,  525,    0,
 -242, -155, -141,   77,  964,    0,    0,    0, 1090, 1554,
  -29,    0,    0,    0,    0, -108,    0, -274,    0,    0,
    0,    0,    0,  -62,  -62, -270, -270, -198, -198, -198,
 -198, -204, -204, -178,  -43,  -71,  -44,   72,  -23,    0,
    0,    0, 1090,    0, -115,    0,   82,  105,    0,  107,
  -66, 1686,  977,    0,    0,    0,    0,  865,    0,    0,
  525,  525,  525, 1090,  994,    0, 1090,    0,    0, 1090,
    0,    0,    0,    0,    0,    0,  121,    0,  120,    0,
    0,   93,    0,    0, -105,  525, -100,    0,    0,    0,
    0,  525,  130,    0,  525,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -21,    0,    0,    0,  338,  574,  776,    0,
    0,    0,    0,    0, 1604,    0,    0,  400,    0,    0,
    0,    0,   71,    0,    0,    0,    0, -131,    0,    0,
    0,    0,    0,    0,    0,    0,  450,    0, 1645,    0,
    0,    0,   27,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  268,    0,  595,    0,    0,  299,  795, 1043, 1248,
 1333, 1367, 1417, 1451,  235,  257,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -131,    0,    0,    0,
  -45,  455,    0,    0,    0,    0,    0,  -98,    0,    0,
  126,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  127,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -92,    0,    0,
    0,    0,    0,  -80,    0,  -55,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  128,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  690,  720,  819,  894, 1116, 1156, 1189,
 1217, 1276, 1307, 1357, 1391, 1427, 1477,  387,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,  -81,    0,    0,  -65,  -56,    0,  -90,  289,  144,
  150,   81,  146,  249,  253,  254,  252,  259,    0,  -54,
    0,  -53,   14,    1,    0,    0,  -25,   69,  406,  -22,
 -140,    0,    0,    0,  347, -123,  -76,    0,  183,  417,
  329,  -12,  -26,  -57,    0,    0,    0,  241, -120, -214,
    0,  -83,    0,   16, -153,    0,    0,    0,  376,   52,
  494,    0,
};
final static int YYTABLESIZE=2182;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         40,
   26,  168,  139,   48,  145,  154,  146,   59,  174,  226,
   42,  175,  245,   25,  198,  255,  177,  235,    1,  301,
  159,  161,  162,  145,   26,  146,  163,   49,   50,   51,
   68,  127,  131,  216,   38,   16,   17,   25,   57,  150,
  151,  219,  260,  179,  232,   55,  301,  127,  145,  319,
    1,   63,   23,  238,  223,  224,  262,  239,  202,  203,
  138,  206,  207,   72,    1,  204,  205,  131,  179,  128,
   23,  129,  258,  247,   69,  179,  175,   70,  175,  311,
  250,  177,   22,  251,  252,  253,  128,  154,  156,  210,
  211,   41,  145,   39,  146,  243,   62,   58,  226,   73,
  217,  315,  268,  126,  131,  131,  131,  131,  271,  272,
  273,   67,  228,  263,  231,  233,  232,  267,  143,   75,
   76,   77,   45,   78,   79,  234,  132,   66,   22,  208,
  209,  270,  131,  178,  149,  289,  179,  219,   23,  128,
    1,    1,  145,  145,  145,  145,  145,  145,  145,  145,
  145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
    1,  132,  179,  130,  261,  310,  312,  331,  316,  157,
  145,  257,  146,  292,  179,  145,  179,  146,  300,  164,
  313,  294,   93,   85,  295,  144,   85,   94,   95,   96,
   97,   98,   99,  180,  181,  182,  131,  170,  132,  132,
  132,  132,  145,  227,  231,   22,  232,   59,   40,  317,
  165,  113,  179,  318,   23,   23,  343,  179,  234,  151,
  171,  345,  118,  151,   22,  118,  132,  332,  333,  334,
  172,  138,  335,  337,   23,  139,  145,  156,  146,  321,
  138,  156,  154,   60,  327,   61,  145,  261,  146,  329,
  166,  338,  344,  183,  302,  184,  303,  185,  346,  167,
  138,  348,  157,  145,  213,  339,  157,  158,  199,  200,
  201,  158,  228,  113,  169,  113,  113,  113,   74,   75,
   76,   77,  212,   78,   79,  113,  278,  279,  280,  281,
  132,  260,  214,  232,  179,  320,  139,  242,  151,  139,
  139,  139,  138,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,   80,   81,   82,  140,   83,   84,
   85,   86,   87,   88,   89,   90,   91,   52,  218,  307,
  308,  215,   93,  126,  126,  274,  275,   94,   95,   96,
   97,   98,   99,  276,  277,  282,  283,    1,   71,  237,
    1,  240,    1,    1,  241,    1,  249,    1,    1,  254,
  256,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   74,   75,   76,   77,  259,   78,   79,  140,  264,
  269,  140,  140,  140,  293,  304,  309,  314,  342,  143,
   75,   76,   77,  323,   78,   79,    2,    3,    4,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,  324,   80,   81,   82,
  325,   83,   84,   85,   86,   87,   88,   89,   90,   91,
   52,   92,  340,  341,  347,   93,  248,  145,  154,  156,
   94,   95,   96,   97,   98,   99,   74,   75,   76,   77,
  284,   78,   79,   93,  265,  285,  287,  286,   94,   95,
   96,   97,   98,   99,  288,  152,  222,  322,  148,  244,
  306,    2,    3,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,  221,   80,   81,   82,   55,   83,   84,   85,   86,
   87,   88,   89,   90,   91,   52,  220,   44,    0,    0,
   93,    0,    0,    0,    0,   94,   95,   96,   97,   98,
   99,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   55,
    0,   55,   55,   55,    0,    0,   55,    0,   55,    0,
    0,    0,   33,   33,   33,   33,   33,   33,   33,   33,
    0,   57,   55,   57,   57,   57,    0,    0,   57,    0,
   57,    0,   15,    0,   15,   15,   15,   15,    0,   15,
    0,   15,    0,   15,   77,    0,   15,   15,   15,   15,
   15,   15,   15,   15,   15,   15,  143,   75,   76,   77,
    0,   78,   79,   33,    0,   33,   33,   33,    0,    0,
   33,    0,   33,    0,   33,    0,    0,   33,   33,    0,
    0,    2,   33,   33,   33,   33,   33,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,    0,   77,    0,    0,   77,  123,   56,   77,   77,
   77,    0,    0,    0,    0,    0,    0,    0,   77,    0,
   93,    0,    0,    0,    0,   94,   95,   96,   97,   98,
   99,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
  123,   56,    0,   56,   56,   56,  106,    0,   56,    0,
   56,  115,    0,    0,  123,    0,    0,  123,  123,    0,
  123,  123,  123,    0,   56,    0,    0,    0,    0,    0,
  123,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,   74,   75,   76,   77,    0,   78,   79,    0,    0,
    0,    0,    0,    0,  106,    0,    0,  106,  106,    0,
  106,  106,  106,  115,    0,  115,  115,  115,    0,    0,
  106,   74,   75,   76,   77,  115,   78,   79,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   80,   81,   82,
    0,   83,   84,   85,   86,   87,   88,   89,   90,   91,
   52,  290,    0,    0,    0,   93,    0,    0,    0,    0,
   94,   95,   96,   97,   98,   99,    0,   80,   81,   82,
   79,   83,   84,   85,   86,   87,   88,   89,   90,   91,
   52,    1,    0,    0,    0,   93,    0,    0,    0,    0,
   94,   95,   96,   97,   98,   99,    0,    0,   27,   27,
   27,   27,   27,   27,   27,   27,    2,    3,    4,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,    0,    0,   79,    0,
    0,   79,    0,    0,   79,   79,   79,  143,   75,   76,
   77,    0,   78,   79,   79,  231,  296,  232,    1,   27,
    0,   27,   27,   27,    0,   23,   27,    0,   27,    0,
   27,    0,    0,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,    2,    3,    4,    5,    6,    7,    8,
    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
   19,   20,   21,   35,   35,   35,   35,   35,   35,   35,
   35,   93,    0,    0,  299,    0,   94,   95,   96,   97,
   98,   99,   22,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   23,   34,   34,   34,   34,   34,   34,   34,
   34,    0,  186,  187,  188,  189,  190,  191,  192,  193,
  194,  195,    0,    0,   35,    0,   35,   35,   35,    0,
    0,   35,    0,   35,    0,   35,    0,    0,   35,   35,
    0,    0,    0,   35,   35,   35,   35,   35,    0,    0,
    0,    0,   81,    0,   34,    0,   34,   34,   34,    0,
  196,   34,    0,   34,    0,   34,    0,    0,   34,   34,
    0,    0,    0,   34,   34,   34,   34,   34,   36,   36,
   36,   36,   36,   36,   36,   36,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,   37,   37,   37,   37,   37,   37,   37,
   81,    0,    0,   81,    0,    0,   81,   81,   81,    0,
    0,    0,    0,    0,    0,    0,   81,    0,    0,   36,
    0,   36,   36,   36,    0,    0,   36,    0,   36,    0,
   36,  143,   75,   76,   77,    0,   78,   79,   36,   36,
   36,   36,   36,   37,    0,   37,   37,   37,    0,    0,
   37,    0,   37,    0,   37,    0,    0,    0,    0,    0,
    0,    0,   37,   37,   37,   37,   37,   38,   38,   38,
   38,   38,   38,   38,   38,    0,    0,    0,    0,    0,
    0,    0,    0,  143,   75,   76,   77,    0,   78,   79,
  153,  330,    0,    0,    0,   93,    0,    0,    0,    0,
   94,   95,   96,   97,   98,   99,  143,   75,   76,   77,
    0,   78,   79,    0,    0,    0,    0,    0,   38,    0,
   38,   38,   38,    0,    0,   38,    0,   38,    0,   38,
  143,   75,   76,   77,    0,   78,   79,   38,   38,   38,
   38,   38,  153,  143,   75,   76,   77,   93,   78,   79,
    0,    0,   94,   95,   96,   97,   98,   99,    0,    0,
  143,   75,   76,   77,  173,   78,   79,    0,    0,    0,
   93,    0,    0,    0,    0,   94,   95,   96,   97,   98,
   99,  143,   75,   76,   77,    0,   78,   79,   91,    0,
    0,    0,    0,    0,   93,    0,    0,    0,    0,   94,
   95,   96,   97,   98,   99,    0,    0,   93,    0,    0,
  328,    0,   94,   95,   96,   97,   98,   99,   39,   39,
   39,   39,   39,   39,   93,  336,    0,    0,    0,   94,
   95,   96,   97,   98,   99,  143,   75,   76,   77,    0,
   78,   79,    0,    0,    0,  158,    0,    0,    0,    0,
   94,   95,   96,   97,   98,   99,  143,   75,   76,   77,
    0,   78,   79,    0,    0,    0,    0,   39,    0,   39,
   39,   39,    0,    0,   39,    0,   39,    0,   39,    0,
    0,    0,    0,    0,    0,    0,   39,   39,   39,   39,
   39,   42,   42,   42,   42,   42,   42,    0,    0,  160,
    0,    0,    0,    0,   94,   95,   96,   97,   98,   99,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   93,    0,    0,    0,    0,   94,   95,   96,   97,   98,
   99,   43,   43,   43,   43,   43,   43,    0,    0,    0,
   42,    0,   42,   42,   42,    0,    0,   42,    0,   42,
    0,   42,    0,    0,    0,    0,    0,    0,    0,   42,
   42,   42,   42,   42,   40,   40,   40,   40,   40,   40,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   43,    0,   43,   43,   43,    0,    0,   43,    0,   43,
    0,   43,   41,   41,   41,   41,   41,   41,    0,   43,
   43,   43,   43,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   40,    0,   40,   40,   40,    0,    0,
   40,    0,   40,    0,   40,   44,   44,   44,   44,    0,
    0,    0,   40,   40,   40,   40,   40,    0,    0,    0,
    0,   41,    0,   41,   41,   41,    0,    0,   41,    0,
   41,    0,   41,   45,   45,   45,   45,    0,    0,    0,
   41,   41,   41,   41,   41,    0,    0,    0,    0,    0,
    0,    0,   44,    0,   44,   44,   44,    0,    0,   44,
    0,   44,    0,   44,   46,   46,   46,   46,    0,    0,
    0,    0,    0,   44,   44,   44,    0,    0,    0,    0,
   45,    0,   45,   45,   45,    0,    0,   45,    0,   45,
    0,   45,   47,   47,    0,    0,    0,    0,    0,    0,
    0,   45,   45,   45,    0,    0,    0,    0,    0,    0,
    0,   46,    0,   46,   46,   46,   48,   48,   46,    0,
   46,    0,   46,    0,    0,    0,   49,   49,    0,    0,
    0,    0,   46,   46,   46,    0,    0,   47,    0,   47,
   47,   47,    0,    0,   47,    0,   47,    0,   47,    0,
   50,   50,    0,    0,    0,    0,    0,    0,   47,   47,
   47,   48,    0,   48,   48,   48,    0,    0,   48,    0,
   48,   49,   48,   49,   49,   49,   51,   51,   49,    0,
   49,    0,   48,   48,   48,    0,   52,   52,    0,    0,
    0,    0,   49,   49,   49,   50,    0,   50,   50,   50,
    0,    0,   50,    0,   50,    0,    0,    0,    0,    0,
   53,   53,    0,    0,    0,    0,   50,   50,   50,    0,
    0,   51,    0,   51,   51,   51,    0,    0,   51,    0,
   51,   52,    0,   52,   52,   52,   54,   54,   52,    0,
   52,    0,    0,   51,   51,    0,    0,    0,    0,    0,
    0,    0,    0,   52,   52,   53,    0,   53,   53,   53,
    0,    0,   53,    0,   53,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   53,    0,
  136,   54,    0,   54,   54,   54,    0,    0,   54,    0,
   54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   54,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,   21,    2,    3,    4,    5,    6,
    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
   17,   18,   19,   20,   21,  137,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  260,  296,  232,    0,    0,    0,
    0,    0,    0,    0,   23,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
  131,  131,  131,  131,  131,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  131,  131,
    0,  131,  131,  131,    0,  131,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
  130,  130,  130,  130,  130,  130,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  130,
  130,    0,  130,  130,  130,    0,  130,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,    2,    3,    4,
    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
   15,   16,   17,   18,   19,   20,   21,  326,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    2,   52,    0,    0,    0,   71,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    0,    0,    0,    0,  225,    8,    9,   10,   11,
   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  291,    2,    3,    4,    5,
    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
   16,   17,   18,   19,   20,   21,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   52,    2,    3,    4,    5,    6,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
   21,  305,    2,    3,    4,    5,    6,    7,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,    2,    0,    0,    0,    0,    0,    8,    9,
   10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
   20,   21,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         22,
    0,   85,   60,   26,   61,   71,   61,   34,   90,  133,
   23,   93,  153,    0,  105,  169,   93,  138,  257,  234,
   77,   78,   79,   80,   24,   80,   80,   27,   28,   29,
   43,   54,   58,  271,  257,  296,  297,   24,  257,  317,
  318,  125,  321,  318,  323,   30,  261,   70,  105,  324,
  257,  257,  331,  318,  131,  132,  177,  322,  329,  330,
   60,  266,  267,   48,  257,  264,  265,   93,  318,   56,
  331,   56,  322,  157,  315,  318,  158,  318,  160,  322,
  164,  158,  321,  165,  166,  167,   73,  153,   73,  268,
  269,   23,  149,  316,  149,  149,  316,  316,  222,   48,
  338,  255,  184,   52,  130,  131,  132,  133,  199,  200,
  201,   43,  135,  179,  321,  138,  323,  183,  257,  258,
  259,  260,  315,  262,  263,  138,   58,  322,  321,  334,
  335,  197,  158,  315,  320,  217,  318,  221,  331,  126,
  257,  257,  199,  200,  201,  202,  203,  204,  205,  206,
  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
  257,   93,  318,  316,  177,  249,  322,  308,  259,  319,
  227,  315,  227,  227,  318,  232,  318,  232,  232,  319,
  322,  315,  321,  315,  318,  324,  318,  326,  327,  328,
  329,  330,  331,  261,  262,  263,  222,  257,  130,  131,
  132,  133,  259,  319,  321,  321,  323,  234,  231,  318,
  321,  257,  318,  322,  331,  331,  322,  318,  231,  318,
  315,  322,  315,  322,  321,  318,  158,  311,  312,  313,
  315,  231,  314,  315,  331,  257,  293,  318,  293,  293,
  240,  322,  308,  321,  302,  323,  303,  260,  303,  303,
  321,  317,  336,  321,  321,  323,  323,  325,  342,  321,
  260,  345,  318,  320,  336,  320,  322,  318,  331,  332,
  333,  322,  295,  319,  321,  321,  322,  323,  257,  258,
  259,  260,  326,  262,  263,  331,  206,  207,  208,  209,
  222,  321,  337,  323,  318,  319,  318,  317,  318,  321,
  322,  323,  302,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
  278,  279,  280,  281,  303,  304,  305,  257,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  317,
  318,  270,  321,  317,  318,  202,  203,  326,  327,  328,
  329,  330,  331,  204,  205,  210,  211,  315,  320,  322,
  318,  318,  320,  321,  324,  323,  319,  325,  326,  308,
  315,  329,  330,  331,  332,  333,  334,  335,  336,  337,
  338,  257,  258,  259,  260,  322,  262,  263,  318,  257,
  257,  321,  322,  323,  319,  257,  322,  321,  306,  257,
  258,  259,  260,  322,  262,  263,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  322,  303,  304,  305,
  324,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  322,  324,  315,  321,  158,  322,  322,  322,
  326,  327,  328,  329,  330,  331,  257,  258,  259,  260,
  212,  262,  263,  321,  322,  213,  215,  214,  326,  327,
  328,  329,  330,  331,  216,   70,  130,  295,   62,  151,
  240,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  126,  303,  304,  305,  271,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,   24,   -1,   -1,
  321,   -1,   -1,   -1,   -1,  326,  327,  328,  329,  330,
  331,  264,  265,  266,  267,  268,  269,  270,  271,  272,
  273,  274,  275,  276,  277,  278,  279,  280,  281,  315,
   -1,  317,  318,  319,   -1,   -1,  322,   -1,  324,   -1,
   -1,   -1,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  315,  338,  317,  318,  319,   -1,   -1,  322,   -1,
  324,   -1,  315,   -1,  317,  318,  319,  320,   -1,  322,
   -1,  324,   -1,  326,  257,   -1,  329,  330,  331,  332,
  333,  334,  335,  336,  337,  338,  257,  258,  259,  260,
   -1,  262,  263,  315,   -1,  317,  318,  319,   -1,   -1,
  322,   -1,  324,   -1,  326,   -1,   -1,  329,  330,   -1,
   -1,  282,  334,  335,  336,  337,  338,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,   -1,  315,   -1,   -1,  318,  257,  271,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  331,   -1,
  321,   -1,   -1,   -1,   -1,  326,  327,  328,  329,  330,
  331,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  315,   -1,  317,  318,  319,  257,   -1,  322,   -1,
  324,  257,   -1,   -1,  315,   -1,   -1,  318,  319,   -1,
  321,  322,  323,   -1,  338,   -1,   -1,   -1,   -1,   -1,
  331,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  257,  258,  259,  260,   -1,  262,  263,   -1,   -1,
   -1,   -1,   -1,   -1,  315,   -1,   -1,  318,  319,   -1,
  321,  322,  323,  319,   -1,  321,  322,  323,   -1,   -1,
  331,  257,  258,  259,  260,  331,  262,  263,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,  304,  305,
   -1,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
  326,  327,  328,  329,  330,  331,   -1,  303,  304,  305,
  257,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  257,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
  326,  327,  328,  329,  330,  331,   -1,   -1,  264,  265,
  266,  267,  268,  269,  270,  271,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,   -1,  315,   -1,
   -1,  318,   -1,   -1,  321,  322,  323,  257,  258,  259,
  260,   -1,  262,  263,  331,  321,  322,  323,  257,  315,
   -1,  317,  318,  319,   -1,  331,  322,   -1,  324,   -1,
  326,   -1,   -1,  329,  330,  331,  332,  333,  334,  335,
  336,  337,  338,  282,  283,  284,  285,  286,  287,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  264,  265,  266,  267,  268,  269,  270,
  271,  321,   -1,   -1,  324,   -1,  326,  327,  328,  329,
  330,  331,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  331,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,   -1,   -1,  315,   -1,  317,  318,  319,   -1,
   -1,  322,   -1,  324,   -1,  326,   -1,   -1,  329,  330,
   -1,   -1,   -1,  334,  335,  336,  337,  338,   -1,   -1,
   -1,   -1,  257,   -1,  315,   -1,  317,  318,  319,   -1,
  320,  322,   -1,  324,   -1,  326,   -1,   -1,  329,  330,
   -1,   -1,   -1,  334,  335,  336,  337,  338,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,  266,  267,  268,  269,  270,  271,
  315,   -1,   -1,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  331,   -1,   -1,  315,
   -1,  317,  318,  319,   -1,   -1,  322,   -1,  324,   -1,
  326,  257,  258,  259,  260,   -1,  262,  263,  334,  335,
  336,  337,  338,  315,   -1,  317,  318,  319,   -1,   -1,
  322,   -1,  324,   -1,  326,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  334,  335,  336,  337,  338,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  257,  258,  259,  260,   -1,  262,  263,
  316,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
  326,  327,  328,  329,  330,  331,  257,  258,  259,  260,
   -1,  262,  263,   -1,   -1,   -1,   -1,   -1,  315,   -1,
  317,  318,  319,   -1,   -1,  322,   -1,  324,   -1,  326,
  257,  258,  259,  260,   -1,  262,  263,  334,  335,  336,
  337,  338,  316,  257,  258,  259,  260,  321,  262,  263,
   -1,   -1,  326,  327,  328,  329,  330,  331,   -1,   -1,
  257,  258,  259,  260,  315,  262,  263,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,  326,  327,  328,  329,  330,
  331,  257,  258,  259,  260,   -1,  262,  263,  315,   -1,
   -1,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,  326,
  327,  328,  329,  330,  331,   -1,   -1,  321,   -1,   -1,
  324,   -1,  326,  327,  328,  329,  330,  331,  266,  267,
  268,  269,  270,  271,  321,  322,   -1,   -1,   -1,  326,
  327,  328,  329,  330,  331,  257,  258,  259,  260,   -1,
  262,  263,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,
  326,  327,  328,  329,  330,  331,  257,  258,  259,  260,
   -1,  262,  263,   -1,   -1,   -1,   -1,  315,   -1,  317,
  318,  319,   -1,   -1,  322,   -1,  324,   -1,  326,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  334,  335,  336,  337,
  338,  266,  267,  268,  269,  270,  271,   -1,   -1,  321,
   -1,   -1,   -1,   -1,  326,  327,  328,  329,  330,  331,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  321,   -1,   -1,   -1,   -1,  326,  327,  328,  329,  330,
  331,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,  324,
   -1,  326,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,
  335,  336,  337,  338,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,  324,
   -1,  326,  266,  267,  268,  269,  270,  271,   -1,  334,
  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  315,   -1,  317,  318,  319,   -1,   -1,
  322,   -1,  324,   -1,  326,  268,  269,  270,  271,   -1,
   -1,   -1,  334,  335,  336,  337,  338,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,
  324,   -1,  326,  268,  269,  270,  271,   -1,   -1,   -1,
  334,  335,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,   -1,  317,  318,  319,   -1,   -1,  322,
   -1,  324,   -1,  326,  268,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,  336,  337,  338,   -1,   -1,   -1,   -1,
  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,  324,
   -1,  326,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  336,  337,  338,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,   -1,  317,  318,  319,  270,  271,  322,   -1,
  324,   -1,  326,   -1,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,  336,  337,  338,   -1,   -1,  315,   -1,  317,
  318,  319,   -1,   -1,  322,   -1,  324,   -1,  326,   -1,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  336,  337,
  338,  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,
  324,  315,  326,  317,  318,  319,  270,  271,  322,   -1,
  324,   -1,  336,  337,  338,   -1,  270,  271,   -1,   -1,
   -1,   -1,  336,  337,  338,  315,   -1,  317,  318,  319,
   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,
  270,  271,   -1,   -1,   -1,   -1,  336,  337,  338,   -1,
   -1,  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,
  324,  315,   -1,  317,  318,  319,  270,  271,  322,   -1,
  324,   -1,   -1,  337,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  337,  338,  315,   -1,  317,  318,  319,
   -1,   -1,  322,   -1,  324,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  338,   -1,
  257,  315,   -1,  317,  318,  319,   -1,   -1,  322,   -1,
  324,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  338,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  331,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,
   -1,  318,  319,  320,   -1,  322,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,
  316,   -1,  318,  319,  320,   -1,  322,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,  316,   -1,   -1,   -1,  320,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,  317,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  317,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,  282,  283,  284,  285,  286,  287,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  282,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,
};
}
final static short YYFINAL=24;
final static short YYMAXTOKEN=338;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IDENTIFIER","CONSTANT","STRING_LITERAL","SIZEOF","PTR_OP",
"INC_OP","DEC_OP","LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","MUL_ASSIGN","DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN",
"LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","TYPE_NAME",
"TYPEDEF","EXTERN","STATIC","AUTO","REGISTER","CHAR","SHORT","INT","LONG",
"SIGNED","UNSIGNED","FLOAT","DOUBLE","CONST","VOLATILE","VOID","STRUCT","UNION",
"ENUM","ELLIPSIS","CASE","DEFAULT","IF","ELSE","SWITCH","WHILE","DO","FOR",
"GOTO","CONTINUE","BREAK","RETURN","SEMICOLON","BRACELEFT","BRACERIGHT","COMMA",
"COLON","EQUAL","RBLEFT","RBRIGHT","BRACKETLEFT","BRACKETRIGHT","DOT","AMP",
"EXCL","TILDE","MINUS","PLUS","STAR","SLASH","PERCENT","LESS","GREATER","CARET",
"BAR","QUESTION",
};
final static String yyrule[] = {
"$accept : translation_unit",
"primary_expression : IDENTIFIER",
"primary_expression : CONSTANT",
"primary_expression : STRING_LITERAL",
"primary_expression : RBLEFT expression RBRIGHT",
"postfix_expression : primary_expression",
"postfix_expression : postfix_expression BRACKETLEFT expression BRACKETRIGHT",
"postfix_expression : postfix_expression RBLEFT RBRIGHT",
"postfix_expression : postfix_expression RBLEFT argument_expression_list RBRIGHT",
"postfix_expression : postfix_expression DOT IDENTIFIER",
"postfix_expression : postfix_expression PTR_OP IDENTIFIER",
"postfix_expression : postfix_expression INC_OP",
"postfix_expression : postfix_expression DEC_OP",
"argument_expression_list : assignment_expression",
"argument_expression_list : argument_expression_list COMMA assignment_expression",
"unary_expression : postfix_expression",
"unary_expression : INC_OP unary_expression",
"unary_expression : DEC_OP unary_expression",
"unary_expression : unary_operator cast_expression",
"unary_expression : SIZEOF unary_expression",
"unary_expression : SIZEOF RBLEFT type_name RBRIGHT",
"unary_operator : AMP",
"unary_operator : STAR",
"unary_operator : PLUS",
"unary_operator : MINUS",
"unary_operator : TILDE",
"unary_operator : EXCL",
"cast_expression : unary_expression",
"cast_expression : RBLEFT type_name RBRIGHT cast_expression",
"multiplicative_expression : cast_expression",
"multiplicative_expression : multiplicative_expression STAR cast_expression",
"multiplicative_expression : multiplicative_expression SLASH cast_expression",
"multiplicative_expression : multiplicative_expression PERCENT cast_expression",
"additive_expression : multiplicative_expression",
"additive_expression : additive_expression PLUS multiplicative_expression",
"additive_expression : additive_expression MINUS multiplicative_expression",
"shift_expression : additive_expression",
"shift_expression : shift_expression LEFT_OP additive_expression",
"shift_expression : shift_expression RIGHT_OP additive_expression",
"relational_expression : shift_expression",
"relational_expression : relational_expression LESS shift_expression",
"relational_expression : relational_expression GREATER shift_expression",
"relational_expression : relational_expression LE_OP shift_expression",
"relational_expression : relational_expression GE_OP shift_expression",
"equality_expression : relational_expression",
"equality_expression : equality_expression EQ_OP relational_expression",
"equality_expression : equality_expression NE_OP relational_expression",
"and_expression : equality_expression",
"and_expression : and_expression AMP equality_expression",
"exclusive_or_expression : and_expression",
"exclusive_or_expression : exclusive_or_expression CARET and_expression",
"inclusive_or_expression : exclusive_or_expression",
"inclusive_or_expression : inclusive_or_expression BAR exclusive_or_expression",
"logical_and_expression : inclusive_or_expression",
"logical_and_expression : logical_and_expression AND_OP inclusive_or_expression",
"logical_or_expression : logical_and_expression",
"logical_or_expression : logical_or_expression OR_OP logical_and_expression",
"conditional_expression : logical_or_expression",
"conditional_expression : logical_or_expression QUESTION expression COLON conditional_expression",
"assignment_expression : conditional_expression",
"assignment_expression : unary_expression assignment_operator assignment_expression",
"assignment_operator : EQUAL",
"assignment_operator : MUL_ASSIGN",
"assignment_operator : DIV_ASSIGN",
"assignment_operator : MOD_ASSIGN",
"assignment_operator : ADD_ASSIGN",
"assignment_operator : SUB_ASSIGN",
"assignment_operator : LEFT_ASSIGN",
"assignment_operator : RIGHT_ASSIGN",
"assignment_operator : AND_ASSIGN",
"assignment_operator : XOR_ASSIGN",
"assignment_operator : OR_ASSIGN",
"expression : assignment_expression",
"expression : expression COMMA assignment_expression",
"constant_expression : conditional_expression",
"declaration : declaration_specifiers SEMICOLON",
"declaration : declaration_specifiers init_declarator_list SEMICOLON",
"declaration_specifiers : storage_class_specifier",
"declaration_specifiers : storage_class_specifier declaration_specifiers",
"declaration_specifiers : type_specifier",
"declaration_specifiers : type_specifier declaration_specifiers",
"declaration_specifiers : type_qualifier",
"declaration_specifiers : type_qualifier declaration_specifiers",
"init_declarator_list : init_declarator",
"init_declarator_list : init_declarator_list COMMA init_declarator",
"init_declarator : declarator",
"init_declarator : declarator EQUAL initializer",
"storage_class_specifier : TYPEDEF",
"storage_class_specifier : EXTERN",
"storage_class_specifier : STATIC",
"storage_class_specifier : AUTO",
"storage_class_specifier : REGISTER",
"type_specifier : VOID",
"type_specifier : CHAR",
"type_specifier : SHORT",
"type_specifier : INT",
"type_specifier : LONG",
"type_specifier : FLOAT",
"type_specifier : DOUBLE",
"type_specifier : SIGNED",
"type_specifier : UNSIGNED",
"type_specifier : struct_or_union_specifier",
"type_specifier : enum_specifier",
"type_specifier : TYPE_NAME",
"struct_or_union_specifier : struct_or_union IDENTIFIER BRACELEFT struct_declaration_list BRACERIGHT",
"struct_or_union_specifier : struct_or_union BRACELEFT struct_declaration_list BRACERIGHT",
"struct_or_union_specifier : struct_or_union IDENTIFIER",
"struct_or_union : STRUCT",
"struct_or_union : UNION",
"struct_declaration_list : struct_declaration",
"struct_declaration_list : struct_declaration_list struct_declaration",
"struct_declaration : specifier_qualifier_list struct_declarator_list SEMICOLON",
"specifier_qualifier_list : type_specifier specifier_qualifier_list",
"specifier_qualifier_list : type_specifier",
"specifier_qualifier_list : type_qualifier specifier_qualifier_list",
"specifier_qualifier_list : type_qualifier",
"struct_declarator_list : struct_declarator",
"struct_declarator_list : struct_declarator_list COMMA struct_declarator",
"struct_declarator : declarator",
"struct_declarator : COLON constant_expression",
"struct_declarator : declarator COLON constant_expression",
"enum_specifier : ENUM BRACELEFT enumerator_list BRACERIGHT",
"enum_specifier : ENUM IDENTIFIER BRACELEFT enumerator_list BRACERIGHT",
"enum_specifier : ENUM IDENTIFIER",
"enumerator_list : enumerator",
"enumerator_list : enumerator_list COMMA enumerator",
"enumerator : IDENTIFIER",
"enumerator : IDENTIFIER EQUAL constant_expression",
"type_qualifier : CONST",
"type_qualifier : VOLATILE",
"declarator : pointer direct_declarator",
"declarator : direct_declarator",
"direct_declarator : IDENTIFIER",
"direct_declarator : RBLEFT declarator RBRIGHT",
"direct_declarator : direct_declarator BRACKETLEFT constant_expression BRACKETRIGHT",
"direct_declarator : direct_declarator BRACKETLEFT BRACKETRIGHT",
"direct_declarator : direct_declarator RBLEFT parameter_type_list RBRIGHT",
"direct_declarator : direct_declarator RBLEFT identifier_list RBRIGHT",
"direct_declarator : direct_declarator RBLEFT RBRIGHT",
"pointer : STAR",
"pointer : STAR type_qualifier_list",
"pointer : STAR pointer",
"pointer : STAR type_qualifier_list pointer",
"type_qualifier_list : type_qualifier",
"type_qualifier_list : type_qualifier_list type_qualifier",
"parameter_type_list : parameter_list",
"parameter_type_list : parameter_list COMMA ELLIPSIS",
"parameter_list : parameter_declaration",
"parameter_list : parameter_list COMMA parameter_declaration",
"parameter_declaration : declaration_specifiers declarator",
"parameter_declaration : declaration_specifiers abstract_declarator",
"parameter_declaration : declaration_specifiers",
"identifier_list : IDENTIFIER",
"identifier_list : identifier_list COMMA IDENTIFIER",
"type_name : specifier_qualifier_list",
"type_name : specifier_qualifier_list abstract_declarator",
"abstract_declarator : pointer",
"abstract_declarator : direct_abstract_declarator",
"abstract_declarator : pointer direct_abstract_declarator",
"direct_abstract_declarator : RBLEFT abstract_declarator RBRIGHT",
"direct_abstract_declarator : BRACKETLEFT BRACKETRIGHT",
"direct_abstract_declarator : BRACKETLEFT constant_expression BRACKETRIGHT",
"direct_abstract_declarator : direct_abstract_declarator BRACKETLEFT BRACKETRIGHT",
"direct_abstract_declarator : direct_abstract_declarator BRACKETLEFT constant_expression BRACKETRIGHT",
"direct_abstract_declarator : RBLEFT RBRIGHT",
"direct_abstract_declarator : RBLEFT parameter_type_list RBRIGHT",
"direct_abstract_declarator : direct_abstract_declarator RBLEFT RBRIGHT",
"direct_abstract_declarator : direct_abstract_declarator RBLEFT parameter_type_list RBRIGHT",
"initializer : assignment_expression",
"initializer : BRACELEFT initializer_list BRACERIGHT",
"initializer : BRACELEFT initializer_list COMMA BRACERIGHT",
"initializer_list : initializer",
"initializer_list : initializer_list COMMA initializer",
"statement : labeled_statement",
"statement : compound_statement",
"statement : expression_statement",
"statement : selection_statement",
"statement : iteration_statement",
"statement : jump_statement",
"labeled_statement : IDENTIFIER COLON statement",
"labeled_statement : CASE constant_expression COLON statement",
"labeled_statement : DEFAULT COLON statement",
"compound_statement : BRACELEFT BRACERIGHT",
"compound_statement : BRACELEFT statement_list BRACERIGHT",
"compound_statement : BRACELEFT declaration_list BRACERIGHT",
"compound_statement : BRACELEFT declaration_list statement_list BRACERIGHT",
"declaration_list : declaration",
"declaration_list : declaration_list declaration",
"statement_list : statement",
"statement_list : statement_list statement",
"expression_statement : SEMICOLON",
"expression_statement : expression SEMICOLON",
"selection_statement : IF RBLEFT expression RBRIGHT statement ELSE statement",
"selection_statement : SWITCH RBLEFT expression RBRIGHT statement",
"iteration_statement : WHILE RBLEFT expression RBRIGHT statement",
"iteration_statement : DO statement WHILE RBLEFT expression RBRIGHT SEMICOLON",
"iteration_statement : FOR RBLEFT expression_statement expression_statement RBRIGHT statement",
"iteration_statement : FOR RBLEFT expression_statement expression_statement expression RBRIGHT statement",
"jump_statement : GOTO IDENTIFIER SEMICOLON",
"jump_statement : CONTINUE SEMICOLON",
"jump_statement : BREAK SEMICOLON",
"jump_statement : RETURN SEMICOLON",
"jump_statement : RETURN expression SEMICOLON",
"translation_unit : external_declaration",
"translation_unit : translation_unit external_declaration",
"external_declaration : function_definition",
"external_declaration : declaration",
"function_definition : declaration_specifiers declarator declaration_list compound_statement",
"function_definition : declaration_specifiers declarator compound_statement",
"function_definition : declarator declaration_list compound_statement",
"function_definition : declarator compound_statement",
};

//#line 437 "grammar.y"

  private Yylex lexer;



  private int yylex () {
    int yyl_return = -1;
    try {
      yylval = new ParserVal(0);
      yyl_return = lexer.yylex();
    }
    catch (IOException e) {
      System.err.println("IO error :"+e);
    }
    return yyl_return;
  }


  public void yyerror (String error) {
    System.err.println ("Error: " + error);
  }


  public Parser(Reader r) {
    lexer = new Yylex(r, this);
  }

  public static void ParseFile(String file) throws IOException {
	System.out.println("Lexer:");
	Parser yyparser;
    yyparser = new Parser(new FileReader(file));
    //Tokenize input file (for debug)
	Yylex lexer = new Yylex(new FileReader(file));
	    int i = 1;
          while(i>0)
          {
              i = lexer.yylex();
              System.out.print(Parser.yyname[i]);
              System.out.print(" ");
          }
    System.out.println();

	System.out.println("Parser:");

  	yyparser.yydebug = true;
  	yyparser.yyparse(); //Parsing goes here
  }
//#line 1090 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
